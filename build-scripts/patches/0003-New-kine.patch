From 5c8a77d1ddfb56fe3313c0cef31004ea971904a1 Mon Sep 17 00:00:00 2001
From: Konstantinos Tsakalozos <kos.tsakalozos@canonical.com>
Date: Tue, 1 Jun 2021 22:58:28 +0300
Subject: [PATCH] New kine

---
 cmd/kube-apiserver/app/server.go              |   3 +-
 .../github.com/canonical/kvsql-dqlite/LICENSE |   1 +
 .../github.com/canonical/kvsql-dqlite/go.mod  |   4 +-
 .../github.com/canonical/kvsql-dqlite/go.sum  |   4 +
 .../canonical/kvsql-dqlite/server/server.go   |  48 +-
 vendor/github.com/k3s-io/kine                 |   1 +
 vendor/github.com/rancher/kine/.gitignore     |  63 ---
 vendor/github.com/rancher/kine/Dockerfile     |   9 -
 vendor/github.com/rancher/kine/LICENSE        | 177 ------
 vendor/github.com/rancher/kine/README.md      |   9 -
 .../rancher/kine/examples/generate-certs.sh   |  11 -
 .../rancher/kine/examples/minimal.md          | 115 ----
 .../rancher/kine/examples/mysql-ssl.cnf       |   5 -
 vendor/github.com/rancher/kine/go.mod         |  17 -
 vendor/github.com/rancher/kine/go.sum         | 468 ----------------
 vendor/github.com/rancher/kine/main.go        |  68 ---
 .../kine/pkg/broadcaster/broadcaster.go       |  83 ---
 .../rancher/kine/pkg/client/client.go         | 133 -----
 .../rancher/kine/pkg/drivers/dqlite/dqlite.go | 248 ---------
 .../kine/pkg/drivers/dqlite/no_dqlite.go      |  14 -
 .../kine/pkg/drivers/generic/generic.go       | 419 --------------
 .../rancher/kine/pkg/drivers/mysql/mysql.go   | 168 ------
 .../rancher/kine/pkg/drivers/pgsql/pgsql.go   | 172 ------
 .../rancher/kine/pkg/drivers/sqlite/sqlite.go | 102 ----
 .../kine/pkg/drivers/sqlite/sqlite_nocgo.go   |  26 -
 .../rancher/kine/pkg/endpoint/endpoint.go     | 160 ------
 .../kine/pkg/logstructured/logstructured.go   | 362 ------------
 .../kine/pkg/logstructured/sqllog/sql.go      | 519 ------------------
 .../rancher/kine/pkg/server/compact.go        |  34 --
 .../rancher/kine/pkg/server/create.go         |  54 --
 .../rancher/kine/pkg/server/delete.go         |  50 --
 .../github.com/rancher/kine/pkg/server/get.go |  27 -
 .../rancher/kine/pkg/server/lease.go          |  32 --
 .../rancher/kine/pkg/server/limited.go        |  52 --
 .../rancher/kine/pkg/server/list.go           |  56 --
 .../rancher/kine/pkg/server/server.go         | 153 ------
 .../rancher/kine/pkg/server/types.go          |  38 --
 .../rancher/kine/pkg/server/update.go         |  72 ---
 .../rancher/kine/pkg/server/watch.go          | 152 -----
 .../github.com/rancher/kine/pkg/tls/config.go |  31 --
 40 files changed, 50 insertions(+), 4110 deletions(-)
 create mode 160000 vendor/github.com/k3s-io/kine
 delete mode 100644 vendor/github.com/rancher/kine/.gitignore
 delete mode 100644 vendor/github.com/rancher/kine/Dockerfile
 delete mode 100644 vendor/github.com/rancher/kine/LICENSE
 delete mode 100644 vendor/github.com/rancher/kine/README.md
 delete mode 100755 vendor/github.com/rancher/kine/examples/generate-certs.sh
 delete mode 100644 vendor/github.com/rancher/kine/examples/minimal.md
 delete mode 100644 vendor/github.com/rancher/kine/examples/mysql-ssl.cnf
 delete mode 100644 vendor/github.com/rancher/kine/go.mod
 delete mode 100644 vendor/github.com/rancher/kine/go.sum
 delete mode 100644 vendor/github.com/rancher/kine/main.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/broadcaster/broadcaster.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/client/client.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/dqlite/dqlite.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/dqlite/no_dqlite.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/generic/generic.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/mysql/mysql.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/pgsql/pgsql.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite_nocgo.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/endpoint/endpoint.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/logstructured/logstructured.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/logstructured/sqllog/sql.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/compact.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/create.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/delete.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/get.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/lease.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/limited.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/list.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/server.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/types.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/update.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/server/watch.go
 delete mode 100644 vendor/github.com/rancher/kine/pkg/tls/config.go

diff --git a/cmd/kube-apiserver/app/server.go b/cmd/kube-apiserver/app/server.go
index 5fe121c1a16..0984d44befa 100644
--- a/cmd/kube-apiserver/app/server.go
+++ b/cmd/kube-apiserver/app/server.go
@@ -177,7 +177,8 @@ cluster's shared state through which all other components interact.`,
 func Run(completeOptions completedServerRunOptions, stopCh <-chan struct{}) error {
 	if completeOptions.Etcd.StorageConfig.Type == storagebackend.StorageTypeDqlite {
 		config := completeOptions.Etcd.StorageConfig
-		server, err := kvsqlserver.New(config.Dir)
+		os.Chdir(config.Dir)
+		server, err := kvsqlserver.New(config.Dir, "unix://kine.sock",true)
 		if err != nil {
 			return err
 		}
diff --git a/vendor/github.com/canonical/kvsql-dqlite/LICENSE b/vendor/github.com/canonical/kvsql-dqlite/LICENSE
index f433b1a53f5..e454a52586f 100644
--- a/vendor/github.com/canonical/kvsql-dqlite/LICENSE
+++ b/vendor/github.com/canonical/kvsql-dqlite/LICENSE
@@ -175,3 +175,4 @@
       of your accepting any such warranty or additional liability.
 
    END OF TERMS AND CONDITIONS
+
diff --git a/vendor/github.com/canonical/kvsql-dqlite/go.mod b/vendor/github.com/canonical/kvsql-dqlite/go.mod
index b3ae10d9fa8..c350638390e 100644
--- a/vendor/github.com/canonical/kvsql-dqlite/go.mod
+++ b/vendor/github.com/canonical/kvsql-dqlite/go.mod
@@ -15,7 +15,7 @@ require (
 	github.com/json-iterator/go v1.1.10 // indirect
 	github.com/lib/pq v1.7.0 // indirect
 	github.com/pkg/errors v0.9.1
-	github.com/rancher/kine v0.4.0
+	github.com/k3s-io/kine v0.6.0
 	github.com/sirupsen/logrus v1.6.0 // indirect
 	github.com/stretchr/testify v1.6.0
 	go.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738
@@ -30,5 +30,3 @@ require (
 	k8s.io/apimachinery v0.17.0
 	k8s.io/apiserver v0.17.0
 )
-
-replace github.com/rancher/kine => github.com/canonical/kine v0.4.1-0.20200624100627-dd35576ecefb
diff --git a/vendor/github.com/canonical/kvsql-dqlite/go.sum b/vendor/github.com/canonical/kvsql-dqlite/go.sum
index 5e43efd93d7..451e5dc2520 100644
--- a/vendor/github.com/canonical/kvsql-dqlite/go.sum
+++ b/vendor/github.com/canonical/kvsql-dqlite/go.sum
@@ -225,6 +225,8 @@ github.com/json-iterator/go v1.1.10 h1:Kz6Cvnvv2wGdaG/V8yMvfkmNiXq9Ya2KUv4rouJJr
 github.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
 github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
+github.com/k3s-io/kine v0.6.0 h1:4l7wjgCxb2oD+7Hyf3xIhkGd/6s1sXpRFdQiyy+7Ki8=
+github.com/k3s-io/kine v0.6.0/go.mod h1:rzCs93+rQHZGOiewMd84PDrER92QeZ6eeHbWkfEy4+w=
 github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=
 github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=
 github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
@@ -240,6 +242,7 @@ github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
 github.com/lib/pq v1.7.0 h1:h93mCPfUSkaul3Ka/VG8uZdmW1uMHDGxzu0NWHuJmHY=
 github.com/lib/pq v1.7.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
+github.com/lib/pq v1.8.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
 github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
 github.com/mailru/easyjson v0.0.0-20160728113105-d5b7844b561a/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
 github.com/mailru/easyjson v0.0.0-20180823135443-60711f1a8329/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
@@ -254,6 +257,7 @@ github.com/mattn/go-runewidth v0.0.3/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzp
 github.com/mattn/go-sqlite3 v1.10.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
 github.com/mattn/go-sqlite3 v1.14.0 h1:mLyGNKR8+Vv9CAU7PphKa2hkEqxxhn8i32J6FPj1/QA=
 github.com/mattn/go-sqlite3 v1.14.0/go.mod h1:JIl7NbARA7phWnGvh0LKTyg7S9BA+6gx71ShQilpsus=
+github.com/mattn/go-sqlite3 v1.14.4/go.mod h1:WVKg1VTActs4Qso6iwGbiFih2UIHo0ENGwNd0Lj+XmI=
 github.com/mattn/go-sqlite3 v2.0.3+incompatible h1:gXHsfypPkaMZrKbD5209QV9jbUTJKjyR5WD3HYQSd+U=
 github.com/mattn/go-sqlite3 v2.0.3+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
 github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
diff --git a/vendor/github.com/canonical/kvsql-dqlite/server/server.go b/vendor/github.com/canonical/kvsql-dqlite/server/server.go
index f9dbbb19836..87f4155ae0d 100644
--- a/vendor/github.com/canonical/kvsql-dqlite/server/server.go
+++ b/vendor/github.com/canonical/kvsql-dqlite/server/server.go
@@ -3,6 +3,7 @@ package server
 import (
 	"context"
 	"fmt"
+	"github.com/k3s-io/kine/pkg/drivers/generic"
 	"io/ioutil"
 	"os"
 	"path/filepath"
@@ -13,8 +14,9 @@ import (
 	"github.com/canonical/go-dqlite/client"
 	"github.com/canonical/kvsql-dqlite/server/config"
 	"github.com/ghodss/yaml"
+	"github.com/k3s-io/kine/pkg/endpoint"
+	"github.com/k3s-io/kine/pkg/tls"
 	"github.com/pkg/errors"
-	"github.com/rancher/kine/pkg/endpoint"
 )
 
 // Server sets up a single dqlite node and serves the cluster management API.
@@ -25,8 +27,17 @@ type Server struct {
 	cancelKine context.CancelFunc
 }
 
-func New(dir string) (*Server, error) {
+var (
+	defaultKineEp = "tcp://127.0.0.1:12379"
+)
+
+func New(dir string, listen string, enableTls bool) (*Server, error) {
 	// Check if we're initializing a new node (i.e. there's an init.yaml).
+	// dir: the directory where data will be stored as well as where the init.yaml
+	//       and certificates should be found
+	// listen: kine listen endpoint could be a socket ("unix://<path>")
+	//         or network ep ("tcp://127.0.0.1:12345")
+	// enableTls: true if we should enable tls communication
 	cfg, err := config.Load(dir)
 	if err != nil {
 		return nil, err
@@ -67,9 +78,11 @@ func New(dir string) (*Server, error) {
 	}
 
 	options := []app.Option{
-		app.WithTLS(app.SimpleTLSConfig(cfg.KeyPair, cfg.Pool)),
 		app.WithFailureDomain(cfg.FailureDomain),
 	}
+	if enableTls {
+		options = append(options, app.WithTLS(app.SimpleTLSConfig(cfg.KeyPair, cfg.Pool)))
+	}
 
 	// Possibly initialize our ID, address and initial node store content.
 	if cfg.Init != nil {
@@ -93,8 +106,6 @@ func New(dir string) (*Server, error) {
 		return nil, err
 	}
 
-	socket := filepath.Join(dir, "kine.sock")
-
 	// Connect to a single peer that is the current machine
 	info := client.NodeInfo{}
 	infoFile := filepath.Join(dir, "info.yaml")
@@ -117,10 +128,33 @@ func New(dir string) (*Server, error) {
 	}
 
 	peers := localServerFile
+
+	ep := defaultKineEp
+	if listen != "" {
+		ep = listen
+	}
+
+	pool := generic.ConnectionPoolConfig{
+		MaxIdle:     5,
+		MaxOpen:     5,
+		MaxLifetime: 60 * time.Second,
+	}
 	config := endpoint.Config{
-		Listener: fmt.Sprintf("unix://%s", socket),
-		Endpoint: fmt.Sprintf("dqlite://k8s?peer-file=%s&driver-name=%s", peers, app.Driver()),
+		Listener:             ep,
+		Endpoint:             fmt.Sprintf("dqlite://k8s?peer-file=%s&driver-name=%s", peers, app.Driver()),
+		ConnectionPoolConfig: pool,
+	}
+
+	if enableTls {
+		crt := filepath.Join(dir, "cluster.crt")
+		key := filepath.Join(dir, "cluster.key")
+		kineTls := tls.Config{
+			CertFile: crt,
+			KeyFile: key,
+		}
+		config.Config = kineTls
 	}
+
 	kineCtx, cancelKine := context.WithCancel(context.Background())
 	if _, err := endpoint.Listen(kineCtx, config); err != nil {
 		return nil, errors.Wrap(err, "kine")
diff --git a/vendor/github.com/k3s-io/kine b/vendor/github.com/k3s-io/kine
new file mode 160000
index 00000000000..0b3ec91dccd
--- /dev/null
+++ b/vendor/github.com/k3s-io/kine
@@ -0,0 +1 @@
+Subproject commit 0b3ec91dccd6e033949af22a77e00a5a62f53727
diff --git a/vendor/github.com/rancher/kine/.gitignore b/vendor/github.com/rancher/kine/.gitignore
deleted file mode 100644
index 309948d8264..00000000000
--- a/vendor/github.com/rancher/kine/.gitignore
+++ /dev/null
@@ -1,63 +0,0 @@
-# OSX leaves these everywhere on SMB shares
-._*
-
-# OSX trash
-.DS_Store
-
-# Eclipse files
-.classpath
-.project
-.settings/**
-
-# Files generated by JetBrains IDEs, e.g. IntelliJ IDEA
-.idea/
-*.iml
-
-# Vscode files
-.vscode
-
-# This is where the result of the go build goes
-/output*/
-/_output*/
-/_output
-
-# Emacs save files
-*~
-\#*\#
-.\#*
-
-# Vim-related files
-[._]*.s[a-w][a-z]
-[._]s[a-w][a-z]
-*.un~
-Session.vim
-.netrwhist
-
-# cscope-related files
-cscope.*
-
-# Go test binaries
-*.test
-
-# JUnit test output from ginkgo e2e tests
-/junit*.xml
-
-# Mercurial files
-**/.hg
-**/.hg*
-
-# Vagrant
-.vagrant
-network_closure.sh
-
-# This file used by some vendor repos (e.g. github.com/go-openapi/...) to store secret variables and should not be ignored
-!\.drone\.sec
-
-# Godeps workspace
-/Godeps/_workspace
-
-/bazel-*
-*.pyc
-
-# Go vendor files
-vendor/
\ No newline at end of file
diff --git a/vendor/github.com/rancher/kine/Dockerfile b/vendor/github.com/rancher/kine/Dockerfile
deleted file mode 100644
index 214d3124282..00000000000
--- a/vendor/github.com/rancher/kine/Dockerfile
+++ /dev/null
@@ -1,9 +0,0 @@
-FROM golang:1.13.7-alpine3.11 AS builder
-RUN apk --no-cache add gcc musl-dev
-WORKDIR /go/src/github.com/rancher/kine
-COPY . .
-RUN GO111MODULE=on go build -o /bin/kine
-
-FROM alpine:3.11
-COPY --from=builder /bin/kine /bin/kine
-ENTRYPOINT ["/bin/kine"]
\ No newline at end of file
diff --git a/vendor/github.com/rancher/kine/LICENSE b/vendor/github.com/rancher/kine/LICENSE
deleted file mode 100644
index f433b1a53f5..00000000000
--- a/vendor/github.com/rancher/kine/LICENSE
+++ /dev/null
@@ -1,177 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
diff --git a/vendor/github.com/rancher/kine/README.md b/vendor/github.com/rancher/kine/README.md
deleted file mode 100644
index 7ead65bffd0..00000000000
--- a/vendor/github.com/rancher/kine/README.md
+++ /dev/null
@@ -1,9 +0,0 @@
-## Kine (Kine is not etcd)
-
-Kine is an etcdshim that translates etcd API to sqlite, Postgres, Mysql, and dqlite
-
-### Features
-- Can be ran standalone so any k8s (not just k3s) can use Kine
-- Implements a subset of etcdAPI (not usable at all for general purpose etcd)
-- Translates etcdTX calls into the desired API (Create, Update, Delete)
-- Backend drivers for dqlite, sqlite, Postgres, MySQL
diff --git a/vendor/github.com/rancher/kine/examples/generate-certs.sh b/vendor/github.com/rancher/kine/examples/generate-certs.sh
deleted file mode 100755
index 33b9e516ac2..00000000000
--- a/vendor/github.com/rancher/kine/examples/generate-certs.sh
+++ /dev/null
@@ -1,11 +0,0 @@
-#!/bin/sh
-
-# Generate self signed root CA cert
-openssl req -nodes -x509 -newkey rsa:2048 -keyout ca.key -out ca.crt -subj "/C=AU/ST=VIC/L=Melbourne/O=Ranch/OU=root/CN=root/emailAddress=sample@sample.com"
-
-
-# Generate server cert to be signed
-openssl req -nodes -newkey rsa:2048 -keyout server.key -out server.csr -subj "/C=AU/ST=VIC/L=Melbourne/O=Ranch/OU=root/CN=localhost/emailAddress=sample@sample.com"
-
-# Sign the server cert
-openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt
diff --git a/vendor/github.com/rancher/kine/examples/minimal.md b/vendor/github.com/rancher/kine/examples/minimal.md
deleted file mode 100644
index 8666ee004d9..00000000000
--- a/vendor/github.com/rancher/kine/examples/minimal.md
+++ /dev/null
@@ -1,115 +0,0 @@
-## Minimal example of using kine
-The following example uses kine with a mysql database for persistence.
-
-A sample script is available to generate certs [here](generate-certs.sh)
-
-We can run mysql on a host:
-
-```
-docker run --name kine-mysql -v $PWD:/etc/mysql/conf.d -p 3306:3306 -e MYSQL_DATABASE=kine -e MYSQL_ROOT_PASSWORD=$PASSWORD -d mysql:latest
-```
-
-This will start mysql db with ssl enabled for client connections.
-
-A sample script is available to generate certs [here](generate-certs.sh)
-
-Run kine on the same host as mysql database:
-```
-kine --endpoint "mysql://root:$PASSWORD@tcp(localhost:3306)/kine"  --ca-file ca.crt --cert-file server.crt --key-file server.key
-```
-
-This will expose the mysql db as an etcd endpoint.
-
-### Using with RKE
-Use the following RKE cluster.yml sample to boot up the cluster.
-
-RKE supports using an external etcd endpoint.
-
-```
-nodes:
-    - address: 1.1.1.1
-      user: ubuntu
-      role:
-        - controlplane
-        - worker
-    - address: 2.2.2.2
-      user: ubuntu
-      role:
-        - controlplane
-        - worker
-cluster_name: "kine-demo"
-network:
-    plugin: canal
-ignore_docker_version: true
-services:
-    etcd:
-        path: /
-        external_urls:
-        - http://kine:2379
-        ca_cert: |-
-            -----BEGIN CERTIFICATE-----
-
-            -----END CERTIFICATE-----
-        cert: |-
-            -----BEGIN CERTIFICATE-----
-           Cert
-            -----END CERTIFICATE-----
-        key: |-
-            -----BEGIN RSA PRIVATE KEY-----
-
-            -----END RSA PRIVATE KEY-----
-```
-
-## Using with kubeadm
-
-You can use the following sample kubeadm-master.cfg to launch a cluster with kine.
-
-```
-apiVersion: kubeadm.k8s.io/v1beta2
-bootstrapTokens:
-- groups:
-  - system:bootstrappers:kubeadm:default-node-token
-  token: abcdef.0123456789abcdef
-  ttl: 24h0m0s
-  usages:
-  - signing
-  - authentication
-kind: InitConfiguration
-localAPIEndpoint:
-  advertiseAddress: 0.0.0.0
-  bindPort: 6443
-nodeRegistration:
-  criSocket: /var/run/dockershim.sock
-  name: kubeadm
-  taints:
-  - effect: NoSchedule
-    key: node-role.kubernetes.io/master
----
-apiServer:
-  timeoutForControlPlane: 4m0s
-apiVersion: kubeadm.k8s.io/v1beta2
-certificatesDir: /etc/kubernetes/pki
-clusterName: kubernetes
-controllerManager: {}
-dns:
-  type: CoreDNS
-imageRepository: k8s.gcr.io
-kind: ClusterConfiguration
-kubernetesVersion: v1.17.0
-networking:
-  dnsDomain: cluster.local
-  serviceSubnet: 10.96.0.0/12
-scheduler: {}
-controlPlaneEndpoint: "0.0.0.0:6443"
-etcd:
-  external:
-    endpoints:
-    - http://k3s:2379
-    caFile: ./ca.crt
-    certFile: ./server.crt
-    keyFile: ./server.key
-```
-
-The cluster can then be launched as
-
-`kubeadm init --config kubeadm-master.cfg --ignore-preflight-errors ExternalEtcdVersion`
diff --git a/vendor/github.com/rancher/kine/examples/mysql-ssl.cnf b/vendor/github.com/rancher/kine/examples/mysql-ssl.cnf
deleted file mode 100644
index 37599efa5d1..00000000000
--- a/vendor/github.com/rancher/kine/examples/mysql-ssl.cnf
+++ /dev/null
@@ -1,5 +0,0 @@
-[mysqld]
-ssl-ca=/etc/mysql/conf.d/ca.crt
-ssl-cert=/etc/mysql/conf.d/server.crt
-ssl-key=/etc/mysql/conf.d/server.key
-require_secure_transport=ON
diff --git a/vendor/github.com/rancher/kine/go.mod b/vendor/github.com/rancher/kine/go.mod
deleted file mode 100644
index d9a5ae9cb85..00000000000
--- a/vendor/github.com/rancher/kine/go.mod
+++ /dev/null
@@ -1,17 +0,0 @@
-module github.com/rancher/kine
-
-go 1.12
-
-require (
-	github.com/Rican7/retry v0.1.0
-	github.com/canonical/go-dqlite v1.5.1
-	github.com/go-sql-driver/mysql v1.4.1
-	github.com/lib/pq v1.1.1
-	github.com/mattn/go-sqlite3 v1.10.0
-	github.com/pkg/errors v0.8.1
-	github.com/rancher/wrangler v0.4.0
-	github.com/sirupsen/logrus v1.4.2
-	github.com/urfave/cli v1.21.0
-	go.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738
-	google.golang.org/grpc v1.23.1
-)
diff --git a/vendor/github.com/rancher/kine/go.sum b/vendor/github.com/rancher/kine/go.sum
deleted file mode 100644
index 70effee0a5b..00000000000
--- a/vendor/github.com/rancher/kine/go.sum
+++ /dev/null
@@ -1,468 +0,0 @@
-cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
-cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
-cloud.google.com/go v0.38.0/go.mod h1:990N+gfupTy94rShfmMCWGDn0LpTmnzTp2qbd1dvSRU=
-github.com/Azure/go-ansiterm v0.0.0-20170929234023-d6e3b3328b78/go.mod h1:LmzpDX56iTiv29bbRTIsUNlaFfuhWRQBWjQdVyAevI8=
-github.com/Azure/go-autorest/autorest v0.9.0/go.mod h1:xyHB1BMZT0cuDHU7I0+g046+BFDTQ8rEZB0s4Yfa6bI=
-github.com/Azure/go-autorest/autorest/adal v0.5.0/go.mod h1:8Z9fGy2MpX0PvDjB1pEgQTmVqjGhiHBW7RJJEciWzS0=
-github.com/Azure/go-autorest/autorest/date v0.1.0/go.mod h1:plvfp3oPSKwf2DNjlBjWF/7vwR+cUD/ELuzDCXwHUVA=
-github.com/Azure/go-autorest/autorest/mocks v0.1.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=
-github.com/Azure/go-autorest/autorest/mocks v0.2.0/go.mod h1:OTyCOPRA2IgIlWxVYxBee2F5Gr4kF2zd2J5cFRaIDN0=
-github.com/Azure/go-autorest/logger v0.1.0/go.mod h1:oExouG+K6PryycPJfVSxi/koC6LSNgds39diKLz7Vrc=
-github.com/Azure/go-autorest/tracing v0.5.0/go.mod h1:r/s2XiOKccPW3HrqB+W0TQzfbtp2fGCgRFtBroKn4Dk=
-github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
-github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=
-github.com/NYTimes/gziphandler v0.0.0-20170623195520-56545f4a5d46/go.mod h1:3wb06e3pkSAbeQ52E9H9iFoQsEEwGN64994WTCIhntQ=
-github.com/PuerkitoBio/purell v1.0.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
-github.com/PuerkitoBio/purell v1.1.0/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
-github.com/PuerkitoBio/purell v1.1.1/go.mod h1:c11w/QuzBsJSee3cPx9rAFu61PvFxuPbtSwDGJws/X0=
-github.com/PuerkitoBio/urlesc v0.0.0-20160726150825-5bd2802263f2/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=
-github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=
-github.com/Rican7/retry v0.1.0 h1:FqK94z34ly8Baa6K+G8Mmza9rYWTKOJk+yckIBB5qVk=
-github.com/Rican7/retry v0.1.0/go.mod h1:FgOROf8P5bebcC1DS0PdOQiqGUridaZvikzUmkFW6gg=
-github.com/agnivade/levenshtein v1.0.1/go.mod h1:CURSv5d9Uaml+FovSIICkLbAUZ9S4RqaHDIsdSBg7lM=
-github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
-github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
-github.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=
-github.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=
-github.com/asaskevich/govalidator v0.0.0-20180720115003-f9ffefc3facf/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=
-github.com/asaskevich/govalidator v0.0.0-20190424111038-f61b66f89f4a/go.mod h1:lB+ZfQJz7igIIfQNfa7Ml4HSf2uFQQRzpGGRXenZAgY=
-github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
-github.com/beorn7/perks v1.0.0 h1:HWo1m869IqiPhD389kmkxeTalrjNbbJTC8LXupb+sl0=
-github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
-github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
-github.com/blang/semver v3.5.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=
-github.com/canonical/go-dqlite v1.5.1 h1:1YjtIrFsC1A3XlgsX38ARAiKhvkZS63PqsEd8z3T4yU=
-github.com/canonical/go-dqlite v1.5.1/go.mod h1:wp00vfMvPYgNCyxcPdHB5XExmDoCGoPUGymloAQT17Y=
-github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
-github.com/cockroachdb/datadriven v0.0.0-20190809214429-80d97fb3cbaa h1:OaNxuTZr7kxeODyLWsRMC+OD03aFUH+mW6r2d+MWa5Y=
-github.com/cockroachdb/datadriven v0.0.0-20190809214429-80d97fb3cbaa/go.mod h1:zn76sxSg3SzpJ0PPJaLDCu+Bu0Lg3sKTORVIj19EIF8=
-github.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=
-github.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=
-github.com/coreos/go-oidc v2.1.0+incompatible/go.mod h1:CgnwVTmzoESiwO9qyAFEMiHoZ1nMCKZlZ9V6mm3/LKc=
-github.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
-github.com/coreos/go-semver v0.3.0 h1:wkHLiw0WNATZnSG7epLsujiMCgPAc9xhjJ4tgnAxmfM=
-github.com/coreos/go-semver v0.3.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
-github.com/coreos/go-systemd v0.0.0-20180511133405-39ca1b05acc7/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
-github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e h1:Wf6HqHfScWJN9/ZjdUKyjop4mf3Qdd+1TvvltAvM3m8=
-github.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
-github.com/coreos/pkg v0.0.0-20160727233714-3ac0863d7acf/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
-github.com/coreos/pkg v0.0.0-20180108230652-97fdf19511ea h1:n2Ltr3SrfQlf/9nOna1DoGKxLx3qTSI8Ttl6Xrqp6mw=
-github.com/coreos/pkg v0.0.0-20180108230652-97fdf19511ea/go.mod h1:E3G3o1h8I7cfcXa63jLwjI0eiQQMgzzUDFVpN/nH/eA=
-github.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=
-github.com/creack/pty v1.1.7/go.mod h1:lj5s0c3V2DBrqTV7llrYr5NG6My20zk30Fl46Y7DoTY=
-github.com/davecgh/go-spew v0.0.0-20151105211317-5215b55f46b2/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
-github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/dgrijalva/jwt-go v3.2.0+incompatible h1:7qlOGliEKZXTDg6OTjfoBKDXWrumCAMpl/TFQ4/5kLM=
-github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZmtrrCbhqsmaPHjLKYnJCaQ=
-github.com/docker/docker v0.7.3-0.20190327010347-be7ac8be2ae0/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=
-github.com/docker/go-units v0.3.3/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
-github.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=
-github.com/docker/spdystream v0.0.0-20160310174837-449fdfce4d96/go.mod h1:Qh8CwZgvJUkLughtfhJv5dyTYa91l1fOUCrgjqmcifM=
-github.com/dustin/go-humanize v0.0.0-20171111073723-bb3d318650d4/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
-github.com/dustin/go-humanize v1.0.0 h1:VSnTsYCnlFHaM2/igO1h6X3HA71jcobQuxemgkq4zYo=
-github.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=
-github.com/elazarl/goproxy v0.0.0-20170405201442-c4fc26588b6e/go.mod h1:/Zj4wYkgs4iZTTu3o/KG3Itv/qCCa8VVMlb3i9OVuzc=
-github.com/emicklei/go-restful v0.0.0-20170410110728-ff4f55a20633/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=
-github.com/emicklei/go-restful v2.9.5+incompatible/go.mod h1:otzb+WCGbkyDHkqmQmT5YD2WR4BBwUdeQoFo8l/7tVs=
-github.com/evanphx/json-patch v4.2.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=
-github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=
-github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
-github.com/ghodss/yaml v0.0.0-20150909031657-73d445a93680/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
-github.com/ghodss/yaml v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=
-github.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=
-github.com/globalsign/mgo v0.0.0-20180905125535-1ca0a4f7cbcb/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=
-github.com/globalsign/mgo v0.0.0-20181015135952-eeefdecb41b8/go.mod h1:xkRDCp4j0OGD1HRkm4kmhM+pmpv3AKq5SU7GMg4oO/Q=
-github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
-github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=
-github.com/go-logr/logr v0.1.0/go.mod h1:ixOQHD9gLJUVQQ2ZOR7zLEifBX6tGkNJF4QyIY7sIas=
-github.com/go-openapi/analysis v0.0.0-20180825180245-b006789cd277/go.mod h1:k70tL6pCuVxPJOHXQ+wIac1FUrvNkHolPie/cLEU6hI=
-github.com/go-openapi/analysis v0.17.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=
-github.com/go-openapi/analysis v0.18.0/go.mod h1:IowGgpVeD0vNm45So8nr+IcQ3pxVtpRoBWb8PVZO0ik=
-github.com/go-openapi/analysis v0.19.2/go.mod h1:3P1osvZa9jKjb8ed2TPng3f0i/UY9snX6gxi44djMjk=
-github.com/go-openapi/analysis v0.19.5/go.mod h1:hkEAkxagaIvIP7VTn8ygJNkd4kAYON2rCu0v0ObL0AU=
-github.com/go-openapi/errors v0.17.0/go.mod h1:LcZQpmvG4wyF5j4IhA73wkLFQg+QJXOQHVjmcZxhka0=
-github.com/go-openapi/errors v0.18.0/go.mod h1:LcZQpmvG4wyF5j4IhA73wkLFQg+QJXOQHVjmcZxhka0=
-github.com/go-openapi/errors v0.19.2/go.mod h1:qX0BLWsyaKfvhluLejVpVNwNRdXZhEbTA4kxxpKBC94=
-github.com/go-openapi/jsonpointer v0.0.0-20160704185906-46af16f9f7b1/go.mod h1:+35s3my2LFTysnkMfxsJBAMHj/DoqoB9knIWoYG/Vk0=
-github.com/go-openapi/jsonpointer v0.17.0/go.mod h1:cOnomiV+CVVwFLk0A/MExoFMjwdsUdVpsRhURCKh+3M=
-github.com/go-openapi/jsonpointer v0.18.0/go.mod h1:cOnomiV+CVVwFLk0A/MExoFMjwdsUdVpsRhURCKh+3M=
-github.com/go-openapi/jsonpointer v0.19.2/go.mod h1:3akKfEdA7DF1sugOqz1dVQHBcuDBPKZGEoHC/NkiQRg=
-github.com/go-openapi/jsonpointer v0.19.3/go.mod h1:Pl9vOtqEWErmShwVjC8pYs9cog34VGT37dQOVbmoatg=
-github.com/go-openapi/jsonreference v0.0.0-20160704190145-13c6e3589ad9/go.mod h1:W3Z9FmVs9qj+KR4zFKmDPGiLdk1D9Rlm7cyMvf57TTg=
-github.com/go-openapi/jsonreference v0.17.0/go.mod h1:g4xxGn04lDIRh0GJb5QlpE3HfopLOL6uZrK/VgnsK9I=
-github.com/go-openapi/jsonreference v0.18.0/go.mod h1:g4xxGn04lDIRh0GJb5QlpE3HfopLOL6uZrK/VgnsK9I=
-github.com/go-openapi/jsonreference v0.19.2/go.mod h1:jMjeRr2HHw6nAVajTXJ4eiUwohSTlpa0o73RUL1owJc=
-github.com/go-openapi/jsonreference v0.19.3/go.mod h1:rjx6GuL8TTa9VaixXglHmQmIL98+wF9xc8zWvFonSJ8=
-github.com/go-openapi/loads v0.17.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=
-github.com/go-openapi/loads v0.18.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=
-github.com/go-openapi/loads v0.19.0/go.mod h1:72tmFy5wsWx89uEVddd0RjRWPZm92WRLhf7AC+0+OOU=
-github.com/go-openapi/loads v0.19.2/go.mod h1:QAskZPMX5V0C2gvfkGZzJlINuP7Hx/4+ix5jWFxsNPs=
-github.com/go-openapi/loads v0.19.4/go.mod h1:zZVHonKd8DXyxyw4yfnVjPzBjIQcLt0CCsn0N0ZrQsk=
-github.com/go-openapi/runtime v0.0.0-20180920151709-4f900dc2ade9/go.mod h1:6v9a6LTXWQCdL8k1AO3cvqx5OtZY/Y9wKTgaoP6YRfA=
-github.com/go-openapi/runtime v0.19.0/go.mod h1:OwNfisksmmaZse4+gpV3Ne9AyMOlP1lt4sK4FXt0O64=
-github.com/go-openapi/runtime v0.19.4/go.mod h1:X277bwSUBxVlCYR3r7xgZZGKVvBd/29gLDlFGtJ8NL4=
-github.com/go-openapi/spec v0.0.0-20160808142527-6aced65f8501/go.mod h1:J8+jY1nAiCcj+friV/PDoE1/3eeccG9LYBs0tYvLOWc=
-github.com/go-openapi/spec v0.17.0/go.mod h1:XkF/MOi14NmjsfZ8VtAKf8pIlbZzyoTvZsdfssdxcBI=
-github.com/go-openapi/spec v0.18.0/go.mod h1:XkF/MOi14NmjsfZ8VtAKf8pIlbZzyoTvZsdfssdxcBI=
-github.com/go-openapi/spec v0.19.2/go.mod h1:sCxk3jxKgioEJikev4fgkNmwS+3kuYdJtcsZsD5zxMY=
-github.com/go-openapi/spec v0.19.3/go.mod h1:FpwSN1ksY1eteniUU7X0N/BgJ7a4WvBFVA8Lj9mJglo=
-github.com/go-openapi/strfmt v0.17.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=
-github.com/go-openapi/strfmt v0.18.0/go.mod h1:P82hnJI0CXkErkXi8IKjPbNBM6lV6+5pLP5l494TcyU=
-github.com/go-openapi/strfmt v0.19.0/go.mod h1:+uW+93UVvGGq2qGaZxdDeJqSAqBqBdl+ZPMF/cC8nDY=
-github.com/go-openapi/strfmt v0.19.3/go.mod h1:0yX7dbo8mKIvc3XSKp7MNfxw4JytCfCD6+bY1AVL9LU=
-github.com/go-openapi/swag v0.0.0-20160704191624-1d0bd113de87/go.mod h1:DXUve3Dpr1UfpPtxFw+EFuQ41HhCWZfha5jSVRG7C7I=
-github.com/go-openapi/swag v0.17.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/kXLo40Tg=
-github.com/go-openapi/swag v0.18.0/go.mod h1:AByQ+nYG6gQg71GINrmuDXCPWdL640yX49/kXLo40Tg=
-github.com/go-openapi/swag v0.19.2/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=
-github.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=
-github.com/go-openapi/validate v0.18.0/go.mod h1:Uh4HdOzKt19xGIGm1qHf/ofbX1YQ4Y+MYsct2VUrAJ4=
-github.com/go-openapi/validate v0.19.2/go.mod h1:1tRCw7m3jtI8eNWEEliiAqUIcBztB2KDnRCRMUi7GTA=
-github.com/go-openapi/validate v0.19.5/go.mod h1:8DJv2CVJQ6kGNpFW6eV9N3JviE1C85nY1c2z52x1Gk4=
-github.com/go-sql-driver/mysql v1.4.1 h1:g24URVg0OFbNUTx9qqY1IRZ9D9z3iPyi5zKhQZpNwpA=
-github.com/go-sql-driver/mysql v1.4.1/go.mod h1:zAC/RDZ24gD3HViQzih4MyKcchzm+sOG5ZlKdlhCg5w=
-github.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=
-github.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
-github.com/gogo/protobuf v1.2.1 h1:/s5zKNz0uPFCZ5hddgPdo2TK2TVrUNMn0OOX8/aZMTE=
-github.com/gogo/protobuf v1.2.1/go.mod h1:hp+jE20tsWTFYpLwKvXlhS1hjn+gTNwPg2I6zVXpSg4=
-github.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d h1:3PaI8p3seN09VjbTYC/QWlUZdZ1qS1zGjy7LH2Wt07I=
-github.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=
-github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=
-github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
-github.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903 h1:LbsanbbD6LieFkXbj9YNNBupiGHJgFeLpO0j0Fza1h8=
-github.com/golang/groupcache v0.0.0-20160516000752-02826c3e7903/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
-github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
-github.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
-github.com/golang/protobuf v0.0.0-20161109072736-4bd1920723d7/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
-github.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=
-github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
-github.com/golang/protobuf v1.3.1 h1:YF8+flBXS5eO826T4nzqPrxfhQThhXl0YzfuUPu4SBg=
-github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
-github.com/golang/protobuf v1.3.2 h1:6nsPYzhq5kReh6QImI3k5qWzO4PEbvbIW2cwSfR/6xs=
-github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
-github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
-github.com/google/btree v1.0.0 h1:0udJVsspx3VBr5FwtLhQQtuAsVc79tTq0ocGIPAU6qo=
-github.com/google/btree v1.0.0/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
-github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
-github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
-github.com/google/gofuzz v0.0.0-20161122191042-44d81051d367/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=
-github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
-github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=
-github.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=
-github.com/google/uuid v1.0.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/google/uuid v1.1.1 h1:Gkbcsh/GbpXz7lPftLA3P6TYMwjCLYm83jiFQZF/3gY=
-github.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/googleapis/gax-go/v2 v2.0.4/go.mod h1:0Wqv26UfaUD9n4G6kQubkQ+KchISgw+vpHVxEJEs9eg=
-github.com/googleapis/gnostic v0.0.0-20170729233727-0c5108395e2d/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=
-github.com/gophercloud/gophercloud v0.1.0/go.mod h1:vxM41WHh5uqHVBMZHzuwNOHh8XEoIEcSTewFxm1c5g8=
-github.com/gorilla/websocket v0.0.0-20170926233335-4201258b820c/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
-github.com/gorilla/websocket v1.4.0 h1:WDFjx/TMzVgy9VdMMQi2K2Emtwi2QcUQsztZ/zLaH/Q=
-github.com/gorilla/websocket v1.4.0/go.mod h1:E7qHFY5m1UJ88s3WnNqhKjPHQ0heANvMoAMk2YaljkQ=
-github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
-github.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de4 h1:z53tR0945TRRQO/fLEVPI6SMv7ZflF0TEaTAoU7tOzg=
-github.com/grpc-ecosystem/go-grpc-middleware v1.0.1-0.20190118093823-f849b5445de4/go.mod h1:FiyG127CGDf3tlThmgyCl78X/SZQqEOJBCDaAfeWzPs=
-github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 h1:Ovs26xHkKqVztRpIrF/92BcuyuQ/YW4NSIpoGtfXNho=
-github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0/go.mod h1:8NvIoxWQoOIhqOTXgfV/d3M/q6VIi02HzZEHgUlZvzk=
-github.com/grpc-ecosystem/grpc-gateway v1.9.5 h1:UImYN5qQ8tuGpGE16ZmjvcTtTw24zw1QAp/SlnNrZhI=
-github.com/grpc-ecosystem/grpc-gateway v1.9.5/go.mod h1:vNeuVxBJEsws4ogUvrchl83t/GYV9WGTSLVdBhOQFDY=
-github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
-github.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
-github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
-github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
-github.com/imdario/mergo v0.3.5/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=
-github.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=
-github.com/jonboulle/clockwork v0.1.0 h1:VKV+ZcuP6l3yW9doeqz6ziZGgcynBVQO+obU0+0hcPo=
-github.com/jonboulle/clockwork v0.1.0/go.mod h1:Ii8DK3G1RaLaWxj9trq07+26W01tbo22gdxWY5EU2bo=
-github.com/json-iterator/go v0.0.0-20180612202835-f2b4162afba3/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
-github.com/json-iterator/go v1.1.6 h1:MrUvLMLTMxbqFJ9kzlvat/rYZqZnW3u4wkLzWTaFwKs=
-github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
-github.com/json-iterator/go v1.1.7 h1:KfgG9LzI+pYjr4xvmz/5H4FXjokeP+rlHLhv3iH62Fo=
-github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
-github.com/json-iterator/go v1.1.8 h1:QiWkFLKq0T7mpzwOTu6BzNDbfTE8OLrYhVKYMLF46Ok=
-github.com/json-iterator/go v1.1.8/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
-github.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=
-github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
-github.com/kisielk/errcheck v1.1.0/go.mod h1:EZBBE59ingxPouuu3KfxchcWSUPOHkagtvWXihfKN4Q=
-github.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=
-github.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=
-github.com/konsorten/go-windows-terminal-sequences v1.0.1 h1:mweAR1A6xJ3oS2pRaGiHgQ4OO8tzTaLawm8vnODuwDk=
-github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
-github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
-github.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=
-github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
-github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
-github.com/kr/pty v1.1.5/go.mod h1:9r2w37qlBe7rQ6e1fg1S/9xpWHSnaqNdHD3WcMdbPDA=
-github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
-github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
-github.com/lib/pq v1.1.1 h1:sJZmqHoEaY7f+NPP8pgLB/WxulyR3fewgCM2qaSlBb4=
-github.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
-github.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=
-github.com/mailru/easyjson v0.0.0-20160728113105-d5b7844b561a/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
-github.com/mailru/easyjson v0.0.0-20180823135443-60711f1a8329/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
-github.com/mailru/easyjson v0.0.0-20190312143242-1de009706dbe/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
-github.com/mailru/easyjson v0.0.0-20190614124828-94de47d64c63/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
-github.com/mailru/easyjson v0.0.0-20190626092158-b2ccc519800e/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=
-github.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=
-github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=
-github.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=
-github.com/mattn/go-runewidth v0.0.2/go.mod h1:LwmH8dsx7+W8Uxz3IHJYH5QSwggIsqBzpuz5H//U1FU=
-github.com/mattn/go-sqlite3 v1.10.0 h1:jbhqpg7tQe4SupckyijYiy0mJJ/pRyHvXf7JdWK860o=
-github.com/mattn/go-sqlite3 v1.10.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
-github.com/matttproud/golang_protobuf_extensions v1.0.1 h1:4hp9jkHxhMHkqkrB3Ix0jegS5sx/RkqARlsWZ6pIwiU=
-github.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=
-github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
-github.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
-github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
-github.com/modern-go/reflect2 v0.0.0-20180320133207-05fbef0ca5da/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
-github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
-github.com/modern-go/reflect2 v1.0.1 h1:9f412s+6RmYXLWZSEzVVgPGK7C2PphHj5RJrvfx9AWI=
-github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
-github.com/munnerz/goautoneg v0.0.0-20120707110453-a547fc61f48d/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=
-github.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=
-github.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=
-github.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f/go.mod h1:ZdcZmHo+o7JKHSa8/e818NopupXU1YMK5fe1lsApnBw=
-github.com/olekukonko/tablewriter v0.0.0-20170122224234-a0225b3f23b5/go.mod h1:vsDQFd/mU46D+Z4whnwzcISnGGzXWMclvtLoiIKAKIo=
-github.com/onsi/ginkgo v0.0.0-20170829012221-11459a886d9c/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
-github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
-github.com/onsi/ginkgo v1.10.1/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
-github.com/onsi/gomega v0.0.0-20170829124025-dcabb60a477c/go.mod h1:C1qb7wdrVGGVU+Z6iS04AVkA3Q65CEZX59MT0QO5uiA=
-github.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=
-github.com/pborman/uuid v1.2.0/go.mod h1:X/NO0urCmaxf9VXbdlT7C2Yzkj2IKimNn4k+gtPdI/k=
-github.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=
-github.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=
-github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
-github.com/pkg/errors v0.8.1 h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=
-github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
-github.com/pmezard/go-difflib v0.0.0-20151028094244-d8ed2627bdf0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
-github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-github.com/pquerna/cachecontrol v0.0.0-20171018203845-0dec1b30a021/go.mod h1:prYjPmNq4d1NPVmpShWobRqXY3q7Vp+80DqgxxUrUIA=
-github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
-github.com/prometheus/client_golang v1.0.0 h1:vrDKnkGzuGvhNAL56c7DBz29ZL+KxnoR0x7enabFceM=
-github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=
-github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
-github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90 h1:S/YWwWx/RA8rT8tKFRuGUZhuA90OyIBpPCXkcbwU8DE=
-github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
-github.com/prometheus/common v0.4.1 h1:K0MGApIoQvMw27RTdJkPbr3JZ7DNbtxQNyi5STVM6Kw=
-github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=
-github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
-github.com/prometheus/procfs v0.0.2 h1:6LJUbpNm42llc4HRCuvApCSWB/WfhuNo9K98Q9sNGfs=
-github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
-github.com/rancher/wrangler v0.4.0 h1:iLvuJcZkd38E3RGG74dFMMNEju0PeTzfT1PQiv5okVU=
-github.com/rancher/wrangler v0.4.0/go.mod h1:1cR91WLhZgkZ+U4fV9nVuXqKurWbgXcIReU4wnQvTN8=
-github.com/remyoudompheng/bigfft v0.0.0-20170806203942-52369c62f446/go.mod h1:uYEyJGbgTkfkS4+E/PavXkNJcbFIpEtjt2B0KDQ5+9M=
-github.com/rogpeppe/fastuuid v0.0.0-20150106093220-6724a57986af/go.mod h1:XWv6SoW27p1b0cqNHllgS5HIMJraePCO15w5zCzIWYg=
-github.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=
-github.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=
-github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
-github.com/sirupsen/logrus v1.4.2 h1:SPIRibHv4MatM3XXNO2BJeFLZwZ2LvZgfQ5+UNI2im4=
-github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
-github.com/soheilhy/cmux v0.1.4 h1:0HKaf1o97UwFjHH9o5XsHUOF+tqmdA7KEzXLpiyaw0E=
-github.com/soheilhy/cmux v0.1.4/go.mod h1:IM3LyeVVIOuxMH7sFAkER9+bJ4dT7Ms6E4xg4kGIyLM=
-github.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=
-github.com/spf13/afero v1.2.2/go.mod h1:9ZxEEn6pIJ8Rxe320qSDBk6AsU0r9pR7Q4OcevTdifk=
-github.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
-github.com/spf13/cobra v0.0.3/go.mod h1:1l0Ry5zgKvJasoi3XT1TypsSe7PqH0Sj9dhYf7v3XqQ=
-github.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=
-github.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=
-github.com/spf13/pflag v0.0.0-20170130214245-9ff6c6923cff/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
-github.com/spf13/pflag v1.0.1 h1:aCvUg6QPl3ibpQUxyLkrEkCHtPqYJL4x9AuhqVqFis4=
-github.com/spf13/pflag v1.0.1/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
-github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
-github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
-github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
-github.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=
-github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
-github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
-github.com/stretchr/objx v0.2.0/go.mod h1:qt09Ya8vawLte6SNmTgCsAVtYtaKzEcn8ATUoHMkEqE=
-github.com/stretchr/testify v0.0.0-20151208002404-e3a8ff8ce365/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
-github.com/stretchr/testify v1.2.2 h1:bSDNvY7ZPG5RlJ8otE/7V6gMiyenm9RtJ7IUVIAoJ1w=
-github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
-github.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=
-github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
-github.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=
-github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
-github.com/tidwall/pretty v1.0.0/go.mod h1:XNkn88O1ChpSDQmQeStsy+sBenx6DDtFZJxhVysOjyk=
-github.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8 h1:ndzgwNDnKIqyCvHTXaCqh9KlOWKvBry6nuXMJmonVsE=
-github.com/tmc/grpc-websocket-proxy v0.0.0-20170815181823-89b8d40f7ca8/go.mod h1:ncp9v5uamzpCO7NfCPTXjqaC+bZgJeR0sMTm6dMHP7U=
-github.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=
-github.com/urfave/cli v1.20.0/go.mod h1:70zkFmudgCuE/ngEzBv17Jvp/497gISqfk5gWijbERA=
-github.com/urfave/cli v1.21.0 h1:wYSSj06510qPIzGSua9ZqsncMmWE3Zr55KBERygyrxE=
-github.com/urfave/cli v1.21.0/go.mod h1:lxDj6qX9Q6lWQxIrbrT0nwecwUtRnhVZAJjJZrVUZZQ=
-github.com/vektah/gqlparser v1.1.2/go.mod h1:1ycwN7Ij5njmMkPPAOaRFY4rET2Enx7IkVv3vaXspKw=
-github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2 h1:eY9dn8+vbi4tKz5Qo6v2eYzo7kUS51QINcR5jNpbZS8=
-github.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2/go.mod h1:UETIi67q53MR2AWcXfiuqkDkRtnGDLqkBTpCHuJHxtU=
-github.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=
-go.etcd.io/bbolt v1.3.3 h1:MUGmc65QhB3pIlaQ5bB4LwqSj6GIonVJXpZiaKNyaKk=
-go.etcd.io/bbolt v1.3.3/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=
-go.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738 h1:VcrIfasaLFkyjk6KNlXQSzO+B0fZcnECiDrKJsfxka0=
-go.etcd.io/etcd v0.0.0-20191023171146-3cf2f69b5738/go.mod h1:dnLIgRNXwCJa5e+c6mIZCrds/GIG4ncV9HhK5PX7jPg=
-go.mongodb.org/mongo-driver v1.0.3/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
-go.mongodb.org/mongo-driver v1.1.1/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
-go.mongodb.org/mongo-driver v1.1.2/go.mod h1:u7ryQJ+DOzQmeO7zB6MHyr8jkEQvC8vH7qLUO4lqsUM=
-go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
-go.uber.org/atomic v1.3.2 h1:2Oa65PReHzfn29GpvgsYwloV9AVFHPDk8tYxt2c2tr4=
-go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
-go.uber.org/multierr v1.1.0 h1:HoEmRHQPVSqub6w2z2d2EOVs2fjyFRGyofhKuyDq0QI=
-go.uber.org/multierr v1.1.0/go.mod h1:wR5kodmAFQ0UK8QlbwjlSNy0Z68gJhDJUG5sjR94q/0=
-go.uber.org/zap v1.10.0 h1:ORx85nbTijNz8ljznvCMR1ZBIPKFn3jQrag10X2AsuM=
-go.uber.org/zap v1.10.0/go.mod h1:vwi/ZaCAaUcBkycHslxD9B2zi4UTXhF60s6SWpuDF0Q=
-golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
-golang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
-golang.org/x/crypto v0.0.0-20190211182817-74369b46fc67/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
-golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2 h1:VklqNMn3ovrHsnt90PveolxSbWFaJdECFbxSq0Mqo2M=
-golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20190320223903-b7391e95e576/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20190617133340-57b3e21c3d56/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20190820162420-60c769a6c586 h1:7KByu05hhLed2MO29w7p1XfZvZ13m8mub3shuVftRs0=
-golang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
-golang.org/x/exp v0.0.0-20190125153040-c74c464bbbf2/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
-golang.org/x/exp v0.0.0-20190312203227-4b39c73a6495/go.mod h1:ZjyILWgesfNpC6sMxTJOJm9Kp84zZh5NQWvqDGG3Qr8=
-golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=
-golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
-golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
-golang.org/x/lint v0.0.0-20190301231843-5614ed5bae6f/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
-golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
-golang.org/x/mobile v0.0.0-20190312151609-d3739f865fa6/go.mod h1:z+o9i4GpDbdi3rU15maQ/Ox0txvL9dWGYEHz965HBQE=
-golang.org/x/net v0.0.0-20170114055629-f2499483f923/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20181005035420-146acd28ed58/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20181220203305-927f97764cc3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
-golang.org/x/net v0.0.0-20190311183353-d8887717615a h1:oWX7TPOiFAMXLq8o0ikBYfCJVlRHBcsciT5bXOrH628=
-golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/net v0.0.0-20190320064053-1272bf9dcd53/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/net v0.0.0-20190613194153-d28f0bde5980 h1:dfGZHvZk057jK2MCeWus/TowKpJ8y4AmooUzdBSR9GU=
-golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20190813141303-74dc4d7220e7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20190827160401-ba9fcec4b297/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20191004110552-13f9640d40b9 h1:rjwSpXsdiK0dV8/Naq3kAw9ymfAeJIyd0upUIElB+lI=
-golang.org/x/net v0.0.0-20191004110552-13f9640d40b9/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
-golang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
-golang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
-golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
-golang.org/x/sys v0.0.0-20170830134202-bb24a47a89ea/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181107165924-66b7b1311ac8/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190209173611-3b5209105503/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a h1:1BGLXjeY4akVXGgbC9HugT3Jv3hCI0z56oJR5vAMgBU=
-golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190312061237-fead79001313 h1:pczuHS43Cp2ktBEEmLwScxgjWsBSzdaQiKzUyf3DTTc=
-golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190321052220-f7bb7a8bee54/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190616124812-15dcb6c0061f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456 h1:ng0gs1AKnRRuEMZoTLLlbOd+C17zUDepwGQBb/n+JVg=
-golang.org/x/sys v0.0.0-20190826190057-c7b8b68b1456/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/text v0.0.0-20160726164857-2910a502d2bf/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
-golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.2 h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=
-golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
-golang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
-golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
-golang.org/x/time v0.0.0-20190308202827-9d24e82272b4 h1:SvFZT6jyqRaOeXpc5h/JSfZenJ2O330aBsf7JfSUXmQ=
-golang.org/x/time v0.0.0-20190308202827-9d24e82272b4/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
-golang.org/x/tools v0.0.0-20180221164845-07fd8470d635/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20181011042414-1f849cf54d09/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190125232054-d66bd3c5d5a6/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
-golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
-golang.org/x/tools v0.0.0-20190312151545-0bb0c0a6e846/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
-golang.org/x/tools v0.0.0-20190312170243-e65039ee4138/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
-golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
-golang.org/x/tools v0.0.0-20190614205625-5aca471b1d59/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
-golang.org/x/tools v0.0.0-20190617190820-da514acc4774/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=
-golang.org/x/tools v0.0.0-20190920225731-5eefd052ad72/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
-golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-gonum.org/v1/gonum v0.0.0-20190331200053-3d26580ed485/go.mod h1:2ltnJ7xHfj0zHS40VVPYEAAMTa3ZGguvHGBSJeRWqE0=
-gonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0/go.mod h1:wa6Ws7BG/ESfp6dHfk7C6KdzKA7wR7u/rKwOGE66zvw=
-gonum.org/v1/netlib v0.0.0-20190331212654-76723241ea4e/go.mod h1:kS+toOQn6AQKjmKJ7gzohV1XkqsFehRA2FbsbkopSuQ=
-google.golang.org/api v0.4.0/go.mod h1:8k5glujaEP+g9n7WNsDg8QP6cUVNI86fCNMcbazEtwE=
-google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
-google.golang.org/appengine v1.4.0 h1:/wp5JvzpHIxhs/dumFmF7BXTf3Z+dd4uXta4kVyO508=
-google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
-google.golang.org/appengine v1.5.0 h1:KxkO13IPW4Lslp2bz+KHP2E3gtFlrIGNThxkZQ3g+4c=
-google.golang.org/appengine v1.5.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
-google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8 h1:Nw54tB0rB7hY/N0NQvRW8DG4Yk3Q6T9cu9RcFQDu1tc=
-google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
-google.golang.org/genproto v0.0.0-20190307195333-5fe7a883aa19/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
-google.golang.org/genproto v0.0.0-20190418145605-e7d98fc518a7/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
-google.golang.org/genproto v0.0.0-20190502173448-54afdca5d873 h1:nfPFGzJkUDX6uBmpN/pSw7MbOAWegH5QDQuoXFHedLg=
-google.golang.org/genproto v0.0.0-20190502173448-54afdca5d873/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=
-google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
-google.golang.org/grpc v1.23.1 h1:q4XQuHFC6I28BKZpo6IYyb3mNO+l7lSOxRuYTCiDfXk=
-google.golang.org/grpc v1.23.1/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
-gopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=
-gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/cheggaaa/pb.v1 v1.0.25/go.mod h1:V/YB90LKu/1FcN3WVnfiiE5oMCibMjukxqG/qStrOgw=
-gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
-gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
-gopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24xpD6X8LsfU/+k=
-gopkg.in/resty.v1 v1.12.0/go.mod h1:mDo4pnntr5jdWRML875a/NmxYqAlA73dVijT2AXvQQo=
-gopkg.in/square/go-jose.v2 v2.2.2/go.mod h1:M9dMgbHiYLoDGQrXy7OpJDJWiKiU//h+vD76mk0e1AI=
-gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
-gopkg.in/yaml.v2 v2.0.0-20170812160011-eb3733d160e7/go.mod h1:JAlM8MvJe8wmxCU4Bli9HhUf9+ttbYbLASfIpnQbh74=
-gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=
-gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=
-gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gotest.tools v2.2.0+incompatible/go.mod h1:DsYFclhRJ6vuDpmuTbkuFWG+y2sxOXAzmJt81HFBacw=
-honnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
-honnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
-honnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=
-k8s.io/api v0.17.0/go.mod h1:npsyOePkeP0CPwyGfXDHxvypiYMJxBWAMpQxCaJ4ZxI=
-k8s.io/apiextensions-apiserver v0.17.0/go.mod h1:XiIFUakZywkUl54fVXa7QTEHcqQz9HG55nHd1DCoHj8=
-k8s.io/apimachinery v0.17.0/go.mod h1:b9qmWdKlLuU9EBh+06BtLcSf/Mu89rWL33naRxs1uZg=
-k8s.io/apiserver v0.17.0/go.mod h1:ABM+9x/prjINN6iiffRVNCBR2Wk7uY4z+EtEGZD48cg=
-k8s.io/client-go v0.17.0/go.mod h1:TYgR6EUHs6k45hb6KWjVD6jFZvJV4gHDikv/It0xz+k=
-k8s.io/code-generator v0.17.0/go.mod h1:DVmfPQgxQENqDIzVR2ddLXMH34qeszkKSdH/N+s+38s=
-k8s.io/component-base v0.17.0/go.mod h1:rKuRAokNMY2nn2A6LP/MiwpoaMRHpfRnrPaUJJj1Yoc=
-k8s.io/gengo v0.0.0-20190128074634-0689ccc1d7d6/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=
-k8s.io/gengo v0.0.0-20190822140433-26a664648505/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=
-k8s.io/gengo v0.0.0-20191120174120-e74f70b9b27e/go.mod h1:ezvh/TsK7cY6rbqRK0oQQ8IAqLxYwwyPxAX1Pzy0ii0=
-k8s.io/klog v0.0.0-20181102134211-b9b56d5dfc92/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=
-k8s.io/klog v0.3.0 h1:0VPpR+sizsiivjIfIAQH/rl8tan6jvWkS7lU+0di3lE=
-k8s.io/klog v0.3.0/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=
-k8s.io/klog v1.0.0/go.mod h1:4Bi6QPql/J/LkTDqv7R/cd3hPo4k2DG6Ptcz060Ez5I=
-k8s.io/kube-openapi v0.0.0-20191107075043-30be4d16710a/go.mod h1:1TqjTSzOxsLGIKfj0lK8EeCP7K1iUG65v09OM0/WG5E=
-k8s.io/utils v0.0.0-20191114184206-e782cd3c129f/go.mod h1:sZAwmy6armz5eXlNoLmJcl4F1QuKu7sr+mFQ0byX7Ew=
-modernc.org/cc v1.0.0/go.mod h1:1Sk4//wdnYJiUIxnW8ddKpaOJCF37yAdqYnkxUpaYxw=
-modernc.org/golex v1.0.0/go.mod h1:b/QX9oBD/LhixY6NDh+IdGv17hgB+51fET1i2kPSmvk=
-modernc.org/mathutil v1.0.0/go.mod h1:wU0vUrJsVWBZ4P6e7xtFJEhFSNsfRLJ8H458uRjg03k=
-modernc.org/strutil v1.0.0/go.mod h1:lstksw84oURvj9y3tn8lGvRxyRC1S2+g5uuIzNfIOBs=
-modernc.org/xc v1.0.0/go.mod h1:mRNCo0bvLjGhHO9WsyuKVU4q0ceiDDDoEeWDJHrNx8I=
-sigs.k8s.io/structured-merge-diff v0.0.0-20190525122527-15d366b2352e/go.mod h1:wWxsB5ozmmv/SG7nM11ayaAW51xMvak/t1r0CSlcokI=
-sigs.k8s.io/structured-merge-diff v1.0.1-0.20191108220359-b1b620dd3f06/go.mod h1:/ULNhyfzRopfcjskuui0cTITekDduZ7ycKN3oUT9R18=
-sigs.k8s.io/yaml v1.1.0 h1:4A07+ZFc2wgJwo8YNlQpr1rVlgUDlxXHhPJciaPY5gs=
-sigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=
diff --git a/vendor/github.com/rancher/kine/main.go b/vendor/github.com/rancher/kine/main.go
deleted file mode 100644
index 7fc1aeb3673..00000000000
--- a/vendor/github.com/rancher/kine/main.go
+++ /dev/null
@@ -1,68 +0,0 @@
-package main
-
-import (
-	"context"
-	"os"
-
-	"github.com/rancher/kine/pkg/endpoint"
-	"github.com/rancher/wrangler/pkg/signals"
-	"github.com/sirupsen/logrus"
-	"github.com/urfave/cli"
-)
-
-var (
-	config endpoint.Config
-)
-
-func main() {
-	app := cli.NewApp()
-	app.Name = "kine"
-	app.Description = "Minimal etcd v3 API to support custom Kubernetes storage engines"
-	app.Usage = "Mini"
-	app.Flags = []cli.Flag{
-		cli.StringFlag{
-			Name:        "listen-address",
-			Value:       "tcp://0.0.0.0:2379",
-			Destination: &config.Listener,
-		},
-		cli.StringFlag{
-			Name:        "endpoint",
-			Usage:       "Storage endpoint (default is sqlite)",
-			Destination: &config.Endpoint,
-		},
-		cli.StringFlag{
-			Name:        "ca-file",
-			Usage:       "CA cert for DB connection",
-			Destination: &config.CAFile,
-		},
-		cli.StringFlag{
-			Name:        "cert-file",
-			Usage:       "Certificate for DB connection",
-			Destination: &config.CertFile,
-		},
-		cli.StringFlag{
-			Name:        "key-file",
-			Usage:       "Key file for DB connection",
-			Destination: &config.KeyFile,
-		},
-		cli.BoolFlag{Name: "debug"},
-	}
-	app.Action = run
-
-	if err := app.Run(os.Args); err != nil {
-		logrus.Fatal(err)
-	}
-}
-
-func run(c *cli.Context) error {
-	if c.Bool("debug") {
-		logrus.SetLevel(logrus.DebugLevel)
-	}
-	ctx := signals.SetupSignalHandler(context.Background())
-	_, err := endpoint.Listen(ctx, config)
-	if err != nil {
-		return err
-	}
-	<-ctx.Done()
-	return ctx.Err()
-}
diff --git a/vendor/github.com/rancher/kine/pkg/broadcaster/broadcaster.go b/vendor/github.com/rancher/kine/pkg/broadcaster/broadcaster.go
deleted file mode 100644
index 7b248100e67..00000000000
--- a/vendor/github.com/rancher/kine/pkg/broadcaster/broadcaster.go
+++ /dev/null
@@ -1,83 +0,0 @@
-package broadcaster
-
-import (
-	"context"
-	"sync"
-)
-
-type ConnectFunc func() (chan interface{}, error)
-
-type Broadcaster struct {
-	sync.Mutex
-	running bool
-	subs    map[chan interface{}]struct{}
-}
-
-func (b *Broadcaster) Subscribe(ctx context.Context, connect ConnectFunc) (<-chan interface{}, error) {
-	b.Lock()
-	defer b.Unlock()
-
-	if !b.running {
-		if err := b.start(connect); err != nil {
-			return nil, err
-		}
-	}
-
-	sub := make(chan interface{}, 100)
-	if b.subs == nil {
-		b.subs = map[chan interface{}]struct{}{}
-	}
-	b.subs[sub] = struct{}{}
-	go func() {
-		<-ctx.Done()
-		b.unsub(sub, true)
-	}()
-
-	return sub, nil
-}
-
-func (b *Broadcaster) unsub(sub chan interface{}, lock bool) {
-	if lock {
-		b.Lock()
-	}
-	if _, ok := b.subs[sub]; ok {
-		close(sub)
-		delete(b.subs, sub)
-	}
-	if lock {
-		b.Unlock()
-	}
-}
-
-func (b *Broadcaster) start(connect ConnectFunc) error {
-	c, err := connect()
-	if err != nil {
-		return err
-	}
-
-	go b.stream(c)
-	b.running = true
-	return nil
-}
-
-func (b *Broadcaster) stream(input chan interface{}) {
-	for item := range input {
-		b.Lock()
-		for sub := range b.subs {
-			select {
-			case sub <- item:
-			default:
-				// Slow consumer, drop
-				go b.unsub(sub, true)
-			}
-		}
-		b.Unlock()
-	}
-
-	b.Lock()
-	for sub := range b.subs {
-		b.unsub(sub, false)
-	}
-	b.running = false
-	b.Unlock()
-}
diff --git a/vendor/github.com/rancher/kine/pkg/client/client.go b/vendor/github.com/rancher/kine/pkg/client/client.go
deleted file mode 100644
index 8dfc8ae70d8..00000000000
--- a/vendor/github.com/rancher/kine/pkg/client/client.go
+++ /dev/null
@@ -1,133 +0,0 @@
-package client
-
-import (
-	"context"
-	"errors"
-	"fmt"
-	"time"
-
-	"github.com/rancher/kine/pkg/endpoint"
-	"go.etcd.io/etcd/clientv3"
-)
-
-type Value struct {
-	Key      []byte
-	Data     []byte
-	Modified int64
-}
-
-var (
-	ErrNotFound = errors.New("etcdwrapper: key not found")
-)
-
-type Client interface {
-	List(ctx context.Context, key string, rev int) ([]Value, error)
-	Get(ctx context.Context, key string) (Value, error)
-	Put(ctx context.Context, key string, value []byte) error
-	Create(ctx context.Context, key string, value []byte) error
-	Update(ctx context.Context, key string, revision int64, value []byte) error
-	Close() error
-}
-
-type client struct {
-	c *clientv3.Client
-}
-
-func New(config endpoint.ETCDConfig) (Client, error) {
-	tlsConfig, err := config.TLSConfig.ClientConfig()
-	if err != nil {
-		return nil, err
-	}
-
-	c, err := clientv3.New(clientv3.Config{
-		Endpoints:   config.Endpoints,
-		DialTimeout: 5 * time.Second,
-		TLS:         tlsConfig,
-	})
-	if err != nil {
-		return nil, err
-	}
-
-	return &client{
-		c: c,
-	}, nil
-}
-
-func (c *client) List(ctx context.Context, key string, rev int) ([]Value, error) {
-	resp, err := c.c.Get(ctx, key, clientv3.WithPrefix(), clientv3.WithRev(int64(rev)))
-	if err != nil {
-		return nil, err
-	}
-
-	var vals []Value
-	for _, kv := range resp.Kvs {
-		vals = append(vals, Value{
-			Key:      kv.Key,
-			Data:     kv.Value,
-			Modified: kv.ModRevision,
-		})
-	}
-
-	return vals, nil
-}
-
-func (c *client) Get(ctx context.Context, key string) (Value, error) {
-	resp, err := c.c.Get(ctx, key)
-	if err != nil {
-		return Value{}, err
-	}
-
-	if len(resp.Kvs) == 1 {
-		return Value{
-			Key:      resp.Kvs[0].Key,
-			Data:     resp.Kvs[0].Value,
-			Modified: resp.Kvs[0].ModRevision,
-		}, nil
-	}
-
-	return Value{}, ErrNotFound
-}
-
-func (c *client) Put(ctx context.Context, key string, value []byte) error {
-	val, err := c.Get(ctx, key)
-	if err != nil {
-		return err
-	}
-	if val.Modified == 0 {
-		return c.Create(ctx, key, value)
-	}
-	return c.Update(ctx, key, val.Modified, value)
-}
-
-func (c *client) Create(ctx context.Context, key string, value []byte) error {
-	resp, err := c.c.Txn(ctx).
-		If(clientv3.Compare(clientv3.ModRevision(key), "=", 0)).
-		Then(clientv3.OpPut(key, string(value))).
-		Commit()
-	if err != nil {
-		return err
-	}
-	if !resp.Succeeded {
-		return fmt.Errorf("key exists")
-	}
-	return nil
-}
-
-func (c *client) Update(ctx context.Context, key string, revision int64, value []byte) error {
-	resp, err := c.c.Txn(ctx).
-		If(clientv3.Compare(clientv3.ModRevision(key), "=", revision)).
-		Then(clientv3.OpPut(key, string(value))).
-		Else(clientv3.OpGet(key)).
-		Commit()
-	if err != nil {
-		return err
-	}
-	if !resp.Succeeded {
-		return fmt.Errorf("revision %d doesnt match", revision)
-	}
-	return nil
-}
-
-func (c *client) Close() error {
-	return c.c.Close()
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/dqlite/dqlite.go b/vendor/github.com/rancher/kine/pkg/drivers/dqlite/dqlite.go
deleted file mode 100644
index 9cb5f740091..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/dqlite/dqlite.go
+++ /dev/null
@@ -1,248 +0,0 @@
-// +build dqlite
-
-package dqlite
-
-import (
-	"context"
-	"database/sql"
-	"fmt"
-	"net/url"
-	"os"
-	"strconv"
-	"strings"
-
-	"github.com/canonical/go-dqlite"
-	"github.com/canonical/go-dqlite/client"
-	"github.com/canonical/go-dqlite/driver"
-	"github.com/pkg/errors"
-	"github.com/rancher/kine/pkg/drivers/sqlite"
-	"github.com/rancher/kine/pkg/server"
-	"github.com/sirupsen/logrus"
-)
-
-var (
-	Dialer = client.DefaultDialFunc
-	Logger = client.DefaultLogFunc
-)
-
-func init() {
-	// We assume SQLite will be used multi-threaded
-	if err := dqlite.ConfigMultiThread(); err != nil {
-		panic(errors.Wrap(err, "failed to set dqlite multithreaded mode"))
-	}
-}
-
-type opts struct {
-	peers      []client.NodeInfo
-	peerFile   string
-	dsn        string
-	driverName string // If not empty, use a pre-registered dqlite driver
-}
-
-func AddPeers(ctx context.Context, nodeStore client.NodeStore, additionalPeers ...client.NodeInfo) error {
-	existing, err := nodeStore.Get(ctx)
-	if err != nil {
-		return err
-	}
-
-	var peers []client.NodeInfo
-
-outer:
-	for _, peer := range additionalPeers {
-		for _, check := range existing {
-			if check.Address == peer.Address {
-				continue outer
-			}
-		}
-		peers = append(peers, peer)
-	}
-
-	if len(peers) > 0 {
-		err = nodeStore.Set(ctx, append(existing, peers...))
-		if err != nil {
-			return err
-		}
-	}
-
-	return nil
-}
-
-func New(ctx context.Context, datasourceName string) (server.Backend, error) {
-	opts, err := parseOpts(datasourceName)
-	if err != nil {
-		return nil, err
-	}
-
-	var nodeStore client.NodeStore
-	if opts.peerFile != "" {
-		nodeStore, err = client.DefaultNodeStore(opts.peerFile)
-		if err != nil {
-			return nil, errors.Wrap(err, "opening peerfile")
-		}
-	} else {
-		nodeStore = client.NewInmemNodeStore()
-	}
-
-	if err := AddPeers(ctx, nodeStore, opts.peers...); err != nil {
-		return nil, errors.Wrap(err, "add peers")
-	}
-
-	if opts.driverName == "" {
-		opts.driverName = "dqlite"
-		d, err := driver.New(nodeStore,
-			driver.WithLogFunc(Logger),
-			driver.WithContext(ctx),
-			driver.WithDialFunc(Dialer))
-		if err != nil {
-			return nil, errors.Wrap(err, "new dqlite driver")
-		}
-		sql.Register(opts.driverName, d)
-	}
-
-	backend, generic, err := sqlite.NewVariant(ctx, opts.driverName, opts.dsn)
-	if err != nil {
-		return nil, errors.Wrap(err, "sqlite client")
-	}
-	if err := migrate(ctx, generic.DB); err != nil {
-		return nil, errors.Wrap(err, "failed to migrate DB from sqlite")
-	}
-
-	generic.LockWrites = true
-	generic.Retry = func(err error) bool {
-		if err, ok := err.(driver.Error); ok {
-			return err.Code == driver.ErrBusy
-		}
-		return false
-	}
-	generic.TranslateErr = func(err error) error {
-		if strings.Contains(err.Error(), "UNIQUE constraint") {
-			return server.ErrKeyExists
-		}
-		return err
-	}
-
-	return backend, nil
-}
-
-func migrate(ctx context.Context, newDB *sql.DB) (exitErr error) {
-	row := newDB.QueryRowContext(ctx, "SELECT COUNT(*) FROM kine")
-	var count int64
-	if err := row.Scan(&count); err != nil {
-		return err
-	}
-	if count > 0 {
-		return nil
-	}
-
-	if _, err := os.Stat("./db/state.db"); err != nil {
-		return nil
-	}
-
-	oldDB, err := sql.Open("sqlite3", "./db/state.db")
-	if err != nil {
-		return nil
-	}
-	defer oldDB.Close()
-
-	oldData, err := oldDB.QueryContext(ctx, "SELECT id, name, created, deleted, create_revision, prev_revision, lease, value, old_value FROM kine")
-	if err != nil {
-		logrus.Errorf("failed to find old data to migrate: %v", err)
-		return nil
-	}
-	defer oldData.Close()
-
-	tx, err := newDB.BeginTx(ctx, nil)
-	if err != nil {
-		return err
-	}
-	defer func() {
-		if exitErr == nil {
-			exitErr = tx.Commit()
-		} else {
-			tx.Rollback()
-		}
-	}()
-
-	for oldData.Next() {
-		row := []interface{}{
-			new(int),
-			new(string),
-			new(int),
-			new(int),
-			new(int),
-			new(int),
-			new(int),
-			new([]byte),
-			new([]byte),
-		}
-		if err := oldData.Scan(row...); err != nil {
-			return err
-		}
-
-		if _, err := newDB.ExecContext(ctx, "INSERT INTO kine(id, name, created, deleted, create_revision, prev_revision, lease, value, old_value) values(?, ?, ?, ?, ?, ?, ?, ?, ?)",
-			row...); err != nil {
-			return err
-		}
-	}
-
-	if err := oldData.Err(); err != nil {
-		return err
-	}
-
-	return nil
-}
-
-func parseOpts(dsn string) (opts, error) {
-	result := opts{
-		dsn: dsn,
-	}
-
-	parts := strings.SplitN(dsn, "?", 2)
-	if len(parts) == 1 {
-		return result, nil
-	}
-
-	values, err := url.ParseQuery(parts[1])
-	if err != nil {
-		return result, err
-	}
-
-	for k, vs := range values {
-		if len(vs) == 0 {
-			continue
-		}
-
-		switch k {
-		case "peer":
-			for _, v := range vs {
-				parts := strings.SplitN(v, ":", 3)
-				if len(parts) != 3 {
-					return result, fmt.Errorf("must be ID:IP:PORT format got: %s", v)
-				}
-				id, err := strconv.ParseUint(parts[0], 10, 64)
-				if err != nil {
-					return result, errors.Wrapf(err, "failed to parse %s", parts[0])
-				}
-				result.peers = append(result.peers, client.NodeInfo{
-					ID:      id,
-					Address: parts[1] + ":" + parts[2],
-				})
-			}
-			delete(values, k)
-		case "peer-file":
-			result.peerFile = vs[0]
-			delete(values, k)
-		case "driver-name":
-			result.driverName = vs[0]
-			delete(values, k)
-		}
-	}
-
-	if len(values) == 0 {
-		result.dsn = parts[0]
-	} else {
-		result.dsn = fmt.Sprintf("%s?%s", parts[0], values.Encode())
-	}
-
-	return result, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/dqlite/no_dqlite.go b/vendor/github.com/rancher/kine/pkg/drivers/dqlite/no_dqlite.go
deleted file mode 100644
index 85f4636687c..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/dqlite/no_dqlite.go
+++ /dev/null
@@ -1,14 +0,0 @@
-// +build !dqlite
-
-package dqlite
-
-import (
-	"context"
-	"fmt"
-
-	"github.com/rancher/kine/pkg/server"
-)
-
-func New(ctx context.Context, datasourceName string) (server.Backend, error) {
-	return nil, fmt.Errorf("dqlite is not support, compile with \"-tags dqlite\"")
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/generic/generic.go b/vendor/github.com/rancher/kine/pkg/drivers/generic/generic.go
deleted file mode 100644
index d6513271aa2..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/generic/generic.go
+++ /dev/null
@@ -1,419 +0,0 @@
-package generic
-
-import (
-	"context"
-	"database/sql"
-	"fmt"
-	"regexp"
-	"strconv"
-	"strings"
-	"sync"
-	"time"
-
-	"github.com/Rican7/retry/jitter"
-	"github.com/sirupsen/logrus"
-)
-
-var (
-	columns = "kv.id as theid, kv.name, kv.created, kv.deleted, kv.create_revision, kv.prev_revision, kv.lease, kv.value, kv.old_value"
-	revSQL  = `
-		SELECT rkv.id
-		FROM kine rkv
-		ORDER BY rkv.id
-		DESC LIMIT 1`
-
-	compactRevSQL = `
-		SELECT crkv.prev_revision
-		FROM kine crkv
-		WHERE crkv.name = 'compact_rev_key'
-		ORDER BY crkv.id DESC LIMIT 1`
-
-	idOfKey = `
-		AND mkv.id <= ? AND mkv.id > (
-			SELECT ikv.id
-			FROM kine ikv
-			WHERE
-				ikv.name = ? AND
-				ikv.id <= ?
-			ORDER BY ikv.id DESC LIMIT 1)`
-
-	listSQL = fmt.Sprintf(`SELECT (%s), (%s), %s
-		FROM kine kv
-		JOIN (
-			SELECT MAX(mkv.id) as id
-			FROM kine mkv
-			WHERE
-				mkv.name LIKE ?
-				%%s
-			GROUP BY mkv.name) maxkv
-	    ON maxkv.id = kv.id
-		WHERE
-			  (kv.deleted = 0 OR ?)
-		ORDER BY kv.id ASC
-		`, revSQL, compactRevSQL, columns)
-)
-
-type Stripped string
-
-func (s Stripped) String() string {
-	str := strings.ReplaceAll(string(s), "\n", "")
-	return regexp.MustCompile("[\t ]+").ReplaceAllString(str, " ")
-}
-
-type ErrRetry func(error) bool
-type TranslateErr func(error) error
-
-type Generic struct {
-	sync.Mutex
-
-	LockWrites            bool
-	LastInsertID          bool
-	DB                    *sql.DB
-	GetCurrentSQL         string
-	GetRevisionSQL        string
-	RevisionSQL           string
-	ListRevisionStartSQL  string
-	GetRevisionAfterSQL   string
-	CountSQL              string
-	AfterSQL              string
-	DeleteSQL             string
-	UpdateCompactSQL      string
-	InsertSQL             string
-	FillSQL               string
-	InsertLastInsertIDSQL string
-	Retry                 ErrRetry
-	TranslateErr          TranslateErr
-}
-
-func configureConnectionPooling(db *sql.DB) {
-	db.SetMaxIdleConns(5)
-	db.SetMaxOpenConns(5)
-	db.SetConnMaxLifetime(60 * time.Second)
-}
-
-func q(sql, param string, numbered bool) string {
-	if param == "?" && !numbered {
-		return sql
-	}
-
-	regex := regexp.MustCompile(`\?`)
-	n := 0
-	return regex.ReplaceAllStringFunc(sql, func(string) string {
-		if numbered {
-			n++
-			return param + strconv.Itoa(n)
-		}
-		return param
-	})
-}
-
-func (d *Generic) Migrate(ctx context.Context) {
-	count, err := d.queryInt64(ctx, "SELECT COUNT(*) FROM key_value")
-	if err != nil || count == 0 {
-		return
-	}
-
-	count, err = d.queryInt64(ctx, "SELECT COUNT(*) FROM kine")
-	if err != nil || count != 0 {
-		return
-	}
-
-	logrus.Infof("Migrating content from old table")
-	_, err = d.execute(ctx,
-		`INSERT INTO kine(deleted, create_revision, prev_revision, name, value, created, lease)
-					SELECT 0, 0, 0, kv.name, kv.value, 1, CASE WHEN kv.ttl > 0 THEN 15 ELSE 0 END
-					FROM key_value kv
-						WHERE kv.id IN (SELECT MAX(kvd.id) FROM key_value kvd GROUP BY kvd.name)`)
-	if err != nil {
-		logrus.Errorf("Migration failed: %v", err)
-	}
-}
-
-func openAndTest(driverName, dataSourceName string) (*sql.DB, error) {
-	db, err := sql.Open(driverName, dataSourceName)
-	if err != nil {
-		return nil, err
-	}
-
-	for i := 0; i < 3; i++ {
-		if err := db.Ping(); err != nil {
-			db.Close()
-			return nil, err
-		}
-	}
-
-	return db, nil
-}
-
-func Open(ctx context.Context, driverName, dataSourceName string, paramCharacter string, numbered bool) (*Generic, error) {
-	var (
-		db  *sql.DB
-		err error
-	)
-
-	for i := 0; i < 300; i++ {
-		db, err = openAndTest(driverName, dataSourceName)
-		if err == nil {
-			break
-		}
-
-		logrus.Errorf("failed to ping connection: %v", err)
-		select {
-		case <-ctx.Done():
-			return nil, ctx.Err()
-		case <-time.After(time.Second):
-		}
-	}
-
-	configureConnectionPooling(db)
-
-	return &Generic{
-		DB: db,
-
-		GetRevisionSQL: q(fmt.Sprintf(`
-			SELECT
-			0, 0, %s
-			FROM kine kv
-			WHERE kv.id = ?`, columns), paramCharacter, numbered),
-
-		GetCurrentSQL:        q(fmt.Sprintf(listSQL, ""), paramCharacter, numbered),
-		ListRevisionStartSQL: q(fmt.Sprintf(listSQL, "AND mkv.id <= ?"), paramCharacter, numbered),
-		GetRevisionAfterSQL:  q(fmt.Sprintf(listSQL, idOfKey), paramCharacter, numbered),
-
-		CountSQL: q(fmt.Sprintf(`
-			SELECT (%s), COUNT(c.theid)
-			FROM (
-				%s
-			) c`, revSQL, fmt.Sprintf(listSQL, "")), paramCharacter, numbered),
-
-		AfterSQL: q(fmt.Sprintf(`
-			SELECT (%s), (%s), %s
-			FROM kine kv
-			WHERE
-				kv.name LIKE ? AND
-				kv.id > ?
-			ORDER BY kv.id ASC`, revSQL, compactRevSQL, columns), paramCharacter, numbered),
-
-		DeleteSQL: q(`
-			DELETE FROM kine
-			WHERE id = ?`, paramCharacter, numbered),
-
-		UpdateCompactSQL: q(`
-			UPDATE kine
-			SET prev_revision = ?
-			WHERE name = 'compact_rev_key'`, paramCharacter, numbered),
-
-		InsertLastInsertIDSQL: q(`INSERT INTO kine(name, created, deleted, create_revision, prev_revision, lease, value, old_value)
-			values(?, ?, ?, ?, ?, ?, ?, ?)`, paramCharacter, numbered),
-
-		InsertSQL: q(`INSERT INTO kine(name, created, deleted, create_revision, prev_revision, lease, value, old_value)
-			values(?, ?, ?, ?, ?, ?, ?, ?) RETURNING id`, paramCharacter, numbered),
-
-		FillSQL: q(`INSERT INTO kine(id, name, created, deleted, create_revision, prev_revision, lease, value, old_value)
-			values(?, ?, ?, ?, ?, ?, ?, ?, ?)`, paramCharacter, numbered),
-	}, err
-}
-
-func (d *Generic) query(ctx context.Context, sql string, args ...interface{}) (rows *sql.Rows, err error) {
-	i := uint(0)
-	defer func() {
-		if err != nil {
-			err = fmt.Errorf("query (try: %d): %w", i, err)
-		}
-	}()
-	for ; i < 500; i++ {
-		if i > 2 {
-			logrus.Debugf("QUERY (try: %d) %v : %s", i, args, Stripped(sql))
-		} else {
-			logrus.Tracef("QUERY (try: %d) %v : %s", i, args, Stripped(sql))
-		}
-		rows, err = d.DB.QueryContext(ctx, sql, args...)
-		if err != nil && d.Retry != nil && d.Retry(err) {
-			time.Sleep(jitter.Deviation(nil, 0.3)(2 * time.Millisecond))
-			continue
-		}
-		return rows, err
-	}
-	return
-}
-
-func (d *Generic) queryInt64(ctx context.Context, sql string, args ...interface{}) (n int64, err error) {
-	i := uint(0)
-	defer func() {
-		if err != nil {
-			err = fmt.Errorf("query int64 (try: %d): %w", i, err)
-		}
-	}()
-	for ; i < 500; i++ {
-		if i > 2 {
-			logrus.Debugf("QUERY INT64 (try: %d) %v : %s", i, args, Stripped(sql))
-		} else {
-			logrus.Tracef("QUERY INT64 (try: %d) %v : %s", i, args, Stripped(sql))
-		}
-		row := d.DB.QueryRowContext(ctx, sql, args...)
-		err = row.Scan(&n)
-		if err != nil && d.Retry != nil && d.Retry(err) {
-			time.Sleep(jitter.Deviation(nil, 0.3)(2 * time.Millisecond))
-			continue
-		}
-		return n, err
-	}
-	return
-}
-
-func (d *Generic) execute(ctx context.Context, sql string, args ...interface{}) (result sql.Result, err error) {
-	i := uint(0)
-	defer func() {
-		if err != nil {
-			err = fmt.Errorf("exec (try: %d): %w", i, err)
-		}
-	}()
-	if d.LockWrites {
-		d.Lock()
-		defer d.Unlock()
-	}
-
-	for ; i < 500; i++ {
-		if i > 2 {
-			logrus.Debugf("EXEC (try: %d) %v : %s", i, args, Stripped(sql))
-		} else {
-			logrus.Tracef("EXEC (try: %d) %v : %s", i, args, Stripped(sql))
-		}
-		result, err = d.DB.ExecContext(ctx, sql, args...)
-		if err != nil && d.Retry != nil && d.Retry(err) {
-			time.Sleep(jitter.Deviation(nil, 0.3)(2 * time.Millisecond))
-			continue
-		}
-		return result, err
-	}
-	return
-}
-
-func (d *Generic) GetCompactRevision(ctx context.Context) (int64, error) {
-	id, err := d.queryInt64(ctx, compactRevSQL)
-	if err == sql.ErrNoRows {
-		return 0, nil
-	}
-	return id, err
-}
-
-func (d *Generic) SetCompactRevision(ctx context.Context, revision int64) error {
-	_, err := d.execute(ctx, d.UpdateCompactSQL, revision)
-	return err
-}
-
-func (d *Generic) GetRevision(ctx context.Context, revision int64) (*sql.Rows, error) {
-	return d.query(ctx, d.GetRevisionSQL, revision)
-}
-
-func (d *Generic) DeleteRevision(ctx context.Context, revision int64) error {
-	_, err := d.execute(ctx, d.DeleteSQL, revision)
-	return err
-}
-
-func (d *Generic) ListCurrent(ctx context.Context, prefix string, limit int64, includeDeleted bool) (*sql.Rows, error) {
-	sql := d.GetCurrentSQL
-	if limit > 0 {
-		sql = fmt.Sprintf("%s LIMIT %d", sql, limit)
-	}
-	return d.query(ctx, sql, prefix, includeDeleted)
-}
-
-func (d *Generic) List(ctx context.Context, prefix, startKey string, limit, revision int64, includeDeleted bool) (*sql.Rows, error) {
-	if startKey == "" {
-		sql := d.ListRevisionStartSQL
-		if limit > 0 {
-			sql = fmt.Sprintf("%s LIMIT %d", sql, limit)
-		}
-		return d.query(ctx, sql, prefix, revision, includeDeleted)
-	}
-
-	sql := d.GetRevisionAfterSQL
-	if limit > 0 {
-		sql = fmt.Sprintf("%s LIMIT %d", sql, limit)
-	}
-	return d.query(ctx, sql, prefix, revision, startKey, revision, includeDeleted)
-}
-
-func (d *Generic) Count(ctx context.Context, prefix string) (int64, int64, error) {
-	var (
-		rev sql.NullInt64
-		id  int64
-		err error
-		i   uint
-	)
-
-	for ; i < 500; i++ {
-		if i > 0 {
-			logrus.Debugf("COUNT (try: %d) : %s", i, prefix)
-		} else {
-			logrus.Tracef("COUNT (try: %d) : %s", i, prefix)
-		}
-		row := d.DB.QueryRowContext(ctx, d.CountSQL, prefix, false)
-		err = row.Scan(&rev, &id)
-		if err != nil && d.Retry != nil && d.Retry(err) {
-			time.Sleep(jitter.Deviation(nil, 0.3)(2 * time.Millisecond))
-			continue
-		}
-		break
-	}
-	if err != nil {
-		err = fmt.Errorf("count %s (try: %d): %w", prefix, i, err)
-	}
-	return rev.Int64, id, err
-}
-
-func (d *Generic) CurrentRevision(ctx context.Context) (int64, error) {
-	id, err := d.queryInt64(ctx, revSQL)
-	if err == sql.ErrNoRows {
-		return 0, nil
-	}
-	return id, err
-}
-
-func (d *Generic) After(ctx context.Context, prefix string, rev, limit int64) (*sql.Rows, error) {
-	sql := d.AfterSQL
-	if limit > 0 {
-		sql = fmt.Sprintf("%s LIMIT %d", sql, limit)
-	}
-	return d.query(ctx, sql, prefix, rev)
-}
-
-func (d *Generic) Fill(ctx context.Context, revision int64) error {
-	_, err := d.execute(ctx, d.FillSQL, revision, fmt.Sprintf("gap-%d", revision), 0, 1, 0, 0, 0, nil, nil)
-	return err
-}
-
-func (d *Generic) IsFill(key string) bool {
-	return strings.HasPrefix(key, "gap-")
-}
-
-func (d *Generic) Insert(ctx context.Context, key string, create, delete bool, createRevision, previousRevision int64, ttl int64, value, prevValue []byte) (id int64, err error) {
-	if d.TranslateErr != nil {
-		defer func() {
-			if err != nil {
-				err = d.TranslateErr(err)
-			}
-		}()
-	}
-
-	cVal := 0
-	dVal := 0
-	if create {
-		cVal = 1
-	}
-	if delete {
-		dVal = 1
-	}
-
-	if d.LastInsertID {
-		row, err := d.execute(ctx, d.InsertLastInsertIDSQL, key, cVal, dVal, createRevision, previousRevision, ttl, value, prevValue)
-		if err != nil {
-			return 0, err
-		}
-		return row.LastInsertId()
-	}
-
-	id, err = d.queryInt64(ctx, d.InsertSQL, key, cVal, dVal, createRevision, previousRevision, ttl, value, prevValue)
-	return id, err
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/mysql/mysql.go b/vendor/github.com/rancher/kine/pkg/drivers/mysql/mysql.go
deleted file mode 100644
index 0fc456301b6..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/mysql/mysql.go
+++ /dev/null
@@ -1,168 +0,0 @@
-package mysql
-
-import (
-	"context"
-	cryptotls "crypto/tls"
-	"database/sql"
-
-	"github.com/go-sql-driver/mysql"
-	"github.com/rancher/kine/pkg/drivers/generic"
-	"github.com/rancher/kine/pkg/logstructured"
-	"github.com/rancher/kine/pkg/logstructured/sqllog"
-	"github.com/rancher/kine/pkg/server"
-	"github.com/rancher/kine/pkg/tls"
-)
-
-const (
-	defaultUnixDSN = "root@unix(/var/run/mysqld/mysqld.sock)/"
-	defaultHostDSN = "root@tcp(127.0.0.1)/"
-)
-
-var (
-	schema = []string{
-		`create table if not exists kine
-			(
-				id INTEGER AUTO_INCREMENT,
-				name VARCHAR(630),
-				created INTEGER,
-				deleted INTEGER,
-				create_revision INTEGER,
-				prev_revision INTEGER,
-				lease INTEGER,
-				value MEDIUMBLOB,
-				old_value MEDIUMBLOB,
-				PRIMARY KEY (id)
-			);`,
-	}
-	nameIdx     = "create index kine_name_index on kine (name)"
-	nameIDIdx   = "create index kine_name_id_index on kine (name,id)"
-	revisionIdx = "create unique index kine_name_prev_revision_uindex on kine (name, prev_revision)"
-	createDB    = "create database if not exists "
-)
-
-func New(ctx context.Context, dataSourceName string, tlsInfo tls.Config) (server.Backend, error) {
-	tlsConfig, err := tlsInfo.ClientConfig()
-	if err != nil {
-		return nil, err
-	}
-
-	if tlsConfig != nil {
-		tlsConfig.MinVersion = cryptotls.VersionTLS11
-	}
-
-	parsedDSN, err := prepareDSN(dataSourceName, tlsConfig)
-	if err != nil {
-		return nil, err
-	}
-
-	if err := createDBIfNotExist(parsedDSN); err != nil {
-		return nil, err
-	}
-
-	dialect, err := generic.Open(ctx, "mysql", parsedDSN, "?", false)
-	if err != nil {
-		return nil, err
-	}
-	dialect.LastInsertID = true
-	dialect.TranslateErr = func(err error) error {
-		if err, ok := err.(*mysql.MySQLError); ok && err.Number == 1062 {
-			return server.ErrKeyExists
-		}
-		return err
-	}
-	if err := setup(dialect.DB); err != nil {
-		return nil, err
-	}
-
-	dialect.Migrate(context.Background())
-	return logstructured.New(sqllog.New(dialect)), nil
-}
-
-func setup(db *sql.DB) error {
-	for _, stmt := range schema {
-		_, err := db.Exec(stmt)
-		if err != nil {
-			return err
-		}
-	}
-	// check if duplicate indexes
-	indexes := []string{
-		nameIdx,
-		nameIDIdx,
-		revisionIdx}
-
-	for _, idx := range indexes {
-		err := createIndex(db, idx)
-		if err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-func createDBIfNotExist(dataSourceName string) error {
-	config, err := mysql.ParseDSN(dataSourceName)
-	if err != nil {
-		return err
-	}
-	dbName := config.DBName
-
-	db, err := sql.Open("mysql", dataSourceName)
-	if err != nil {
-		return err
-	}
-	_, err = db.Exec(createDB + dbName)
-	if err != nil {
-		if mysqlError, ok := err.(*mysql.MySQLError); !ok || mysqlError.Number != 1049 {
-			return err
-		}
-		config.DBName = ""
-		db, err = sql.Open("mysql", config.FormatDSN())
-		if err != nil {
-			return err
-		}
-		_, err = db.Exec(createDB + dbName)
-		if err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-func prepareDSN(dataSourceName string, tlsConfig *cryptotls.Config) (string, error) {
-	if len(dataSourceName) == 0 {
-		dataSourceName = defaultUnixDSN
-		if tlsConfig != nil {
-			dataSourceName = defaultHostDSN
-		}
-	}
-	config, err := mysql.ParseDSN(dataSourceName)
-	if err != nil {
-		return "", err
-	}
-	// setting up tlsConfig
-	if tlsConfig != nil {
-		if err := mysql.RegisterTLSConfig("kine", tlsConfig); err != nil {
-			return "", err
-		}
-		config.TLSConfig = "kine"
-	}
-	dbName := "kubernetes"
-	if len(config.DBName) > 0 {
-		dbName = config.DBName
-	}
-	config.DBName = dbName
-	parsedDSN := config.FormatDSN()
-
-	return parsedDSN, nil
-}
-
-func createIndex(db *sql.DB, indexStmt string) error {
-	_, err := db.Exec(indexStmt)
-	if err != nil {
-		if mysqlError, ok := err.(*mysql.MySQLError); !ok || mysqlError.Number != 1061 {
-			return err
-		}
-	}
-	return nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/pgsql/pgsql.go b/vendor/github.com/rancher/kine/pkg/drivers/pgsql/pgsql.go
deleted file mode 100644
index 7dd7a2a401d..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/pgsql/pgsql.go
+++ /dev/null
@@ -1,172 +0,0 @@
-package pgsql
-
-import (
-	"context"
-	"database/sql"
-	"net/url"
-	"regexp"
-	"strconv"
-	"strings"
-
-	"github.com/lib/pq"
-	"github.com/rancher/kine/pkg/drivers/generic"
-	"github.com/rancher/kine/pkg/logstructured"
-	"github.com/rancher/kine/pkg/logstructured/sqllog"
-	"github.com/rancher/kine/pkg/server"
-	"github.com/rancher/kine/pkg/tls"
-)
-
-const (
-	defaultDSN = "postgres://postgres:postgres@localhost/"
-)
-
-var (
-	schema = []string{
-		`create table if not exists kine
-			(
-				id SERIAL PRIMARY KEY,
-				name VARCHAR(630),
-				created INTEGER,
-				deleted INTEGER,
-				create_revision INTEGER,
-				prev_revision INTEGER,
-				lease INTEGER,
-				value bytea,
-				old_value bytea
-			);`,
-		`CREATE INDEX IF NOT EXISTS kine_name_index ON kine (name)`,
-		`CREATE INDEX IF NOT EXISTS kine_name_id_index ON kine (name,id)`,
-		`CREATE UNIQUE INDEX IF NOT EXISTS kine_name_prev_revision_uindex ON kine (name, prev_revision)`,
-	}
-	createDB = "create database "
-)
-
-func New(ctx context.Context, dataSourceName string, tlsInfo tls.Config) (server.Backend, error) {
-	parsedDSN, err := prepareDSN(dataSourceName, tlsInfo)
-	if err != nil {
-		return nil, err
-	}
-
-	if err := createDBIfNotExist(parsedDSN); err != nil {
-		return nil, err
-	}
-
-	dialect, err := generic.Open(ctx, "postgres", parsedDSN, "$", true)
-	if err != nil {
-		return nil, err
-	}
-	dialect.TranslateErr = func(err error) error {
-		if err, ok := err.(*pq.Error); ok && err.Code == "23505" {
-			return server.ErrKeyExists
-		}
-		return err
-	}
-
-	if err := setup(dialect.DB); err != nil {
-		return nil, err
-	}
-
-	dialect.Migrate(context.Background())
-	return logstructured.New(sqllog.New(dialect)), nil
-}
-
-func setup(db *sql.DB) error {
-	for _, stmt := range schema {
-		_, err := db.Exec(stmt)
-		if err != nil {
-			return err
-		}
-	}
-
-	return nil
-}
-
-func createDBIfNotExist(dataSourceName string) error {
-	u, err := url.Parse(dataSourceName)
-	if err != nil {
-		return err
-	}
-
-	dbName := strings.SplitN(u.Path, "/", 2)[1]
-	db, err := sql.Open("postgres", dataSourceName)
-	if err != nil {
-		return err
-	}
-	defer db.Close()
-
-	err = db.Ping()
-	// check if database already exists
-	if _, ok := err.(*pq.Error); !ok {
-		return err
-	}
-	if err := err.(*pq.Error); err.Code != "42P04" {
-		if err.Code != "3D000" {
-			return err
-		}
-		// database doesn't exit, will try to create it
-		u.Path = "/postgres"
-		db, err := sql.Open("postgres", u.String())
-		if err != nil {
-			return err
-		}
-		defer db.Close()
-		_, err = db.Exec(createDB + dbName + ";")
-		if err != nil {
-			return err
-		}
-	}
-	return nil
-}
-
-func q(sql string) string {
-	regex := regexp.MustCompile(`\?`)
-	pref := "$"
-	n := 0
-	return regex.ReplaceAllStringFunc(sql, func(string) string {
-		n++
-		return pref + strconv.Itoa(n)
-	})
-}
-
-func prepareDSN(dataSourceName string, tlsInfo tls.Config) (string, error) {
-	if len(dataSourceName) == 0 {
-		dataSourceName = defaultDSN
-	} else {
-		dataSourceName = "postgres://" + dataSourceName
-	}
-	u, err := url.Parse(dataSourceName)
-	if err != nil {
-		return "", err
-	}
-	if len(u.Path) == 0 || u.Path == "/" {
-		u.Path = "/kubernetes"
-	}
-
-	queryMap, err := url.ParseQuery(u.RawQuery)
-	if err != nil {
-		return "", err
-	}
-	// set up tls dsn
-	params := url.Values{}
-	sslmode := ""
-	if _, ok := queryMap["sslcert"]; tlsInfo.CertFile != "" && !ok {
-		params.Add("sslcert", tlsInfo.CertFile)
-		sslmode = "verify-full"
-	}
-	if _, ok := queryMap["sslkey"]; tlsInfo.KeyFile != "" && !ok {
-		params.Add("sslkey", tlsInfo.KeyFile)
-		sslmode = "verify-full"
-	}
-	if _, ok := queryMap["sslrootcert"]; tlsInfo.CAFile != "" && !ok {
-		params.Add("sslrootcert", tlsInfo.CAFile)
-		sslmode = "verify-full"
-	}
-	if _, ok := queryMap["sslmode"]; !ok && sslmode != "" {
-		params.Add("sslmode", sslmode)
-	}
-	for k, v := range queryMap {
-		params.Add(k, v[0])
-	}
-	u.RawQuery = params.Encode()
-	return u.String(), nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite.go b/vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite.go
deleted file mode 100644
index f4d1127d5a0..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite.go
+++ /dev/null
@@ -1,102 +0,0 @@
-// +build cgo
-
-package sqlite
-
-import (
-	"context"
-	"database/sql"
-	"os"
-	"time"
-
-	"github.com/mattn/go-sqlite3"
-	"github.com/pkg/errors"
-	"github.com/rancher/kine/pkg/drivers/generic"
-	"github.com/rancher/kine/pkg/logstructured"
-	"github.com/rancher/kine/pkg/logstructured/sqllog"
-	"github.com/rancher/kine/pkg/server"
-	"github.com/sirupsen/logrus"
-
-	// sqlite db driver
-	_ "github.com/mattn/go-sqlite3"
-)
-
-var (
-	schema = []string{
-		`CREATE TABLE IF NOT EXISTS kine
-			(
-				id INTEGER primary key autoincrement,
-				name INTEGER,
-				created INTEGER,
-				deleted INTEGER,
-				create_revision INTEGER,
-				prev_revision INTEGER,
-				lease INTEGER,
-				value BLOB,
-				old_value BLOB
-			)`,
-		`CREATE INDEX IF NOT EXISTS kine_name_index ON kine (name)`,
-		`CREATE UNIQUE INDEX IF NOT EXISTS kine_name_prev_revision_uindex ON kine (name, prev_revision)`,
-	}
-)
-
-func New(ctx context.Context, dataSourceName string) (server.Backend, error) {
-	backend, _, err := NewVariant(ctx, "sqlite3", dataSourceName)
-	return backend, err
-}
-
-func NewVariant(ctx context.Context, driverName, dataSourceName string) (server.Backend, *generic.Generic, error) {
-	if dataSourceName == "" {
-		if err := os.MkdirAll("./db", 0700); err != nil {
-			return nil, nil, err
-		}
-		dataSourceName = "./db/state.db?_journal=WAL&cache=shared"
-	}
-
-	dialect, err := generic.Open(ctx, driverName, dataSourceName, "?", false)
-	if err != nil {
-		return nil, nil, err
-	}
-	dialect.LastInsertID = true
-	dialect.TranslateErr = func(err error) error {
-		if err, ok := err.(sqlite3.Error); ok && err.ExtendedCode == sqlite3.ErrConstraintUnique {
-			return server.ErrKeyExists
-		}
-		return err
-	}
-
-	// this is the first SQL that will be executed on a new DB conn so
-	// loop on failure here because in the case of dqlite it could still be initializing
-	for i := 0; i < 300; i++ {
-		err = setup(dialect.DB)
-		if err == nil {
-			break
-		}
-		logrus.Errorf("failed to setup db: %v", err)
-		select {
-		case <-ctx.Done():
-			return nil, nil, ctx.Err()
-		case <-time.After(time.Second):
-		}
-		time.Sleep(time.Second)
-	}
-	if err != nil {
-		return nil, nil, errors.Wrap(err, "setup db")
-	}
-	//if err := setup(dialect.DB); err != nil {
-	//	return nil, nil, errors.Wrap(err, "setup db")
-	//}
-
-	dialect.Migrate(context.Background())
-	return logstructured.New(sqllog.New(dialect)), dialect, nil
-}
-
-func setup(db *sql.DB) error {
-	for _, stmt := range schema {
-		_, err := db.Exec(stmt)
-		if err != nil {
-			return err
-		}
-	}
-
-	return nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite_nocgo.go b/vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite_nocgo.go
deleted file mode 100644
index bdf5977f106..00000000000
--- a/vendor/github.com/rancher/kine/pkg/drivers/sqlite/sqlite_nocgo.go
+++ /dev/null
@@ -1,26 +0,0 @@
-// +build !cgo
-
-package sqlite
-
-import (
-	"context"
-	"database/sql"
-	"errors"
-
-	"github.com/rancher/kine/pkg/drivers/generic"
-	"github.com/rancher/kine/pkg/server"
-)
-
-var errNoCgo = errors.New("this binary is built without CGO, sqlite is disabled")
-
-func New(ctx context.Context, dataSourceName string) (server.Backend, error) {
-	return nil, errNoCgo
-}
-
-func NewVariant(driverName, dataSourceName string) (server.Backend, *generic.Generic, error) {
-	return nil, nil, errNoCgo
-}
-
-func setup(db *sql.DB) error {
-	return errNoCgo
-}
diff --git a/vendor/github.com/rancher/kine/pkg/endpoint/endpoint.go b/vendor/github.com/rancher/kine/pkg/endpoint/endpoint.go
deleted file mode 100644
index e8fc74f7651..00000000000
--- a/vendor/github.com/rancher/kine/pkg/endpoint/endpoint.go
+++ /dev/null
@@ -1,160 +0,0 @@
-package endpoint
-
-import (
-	"context"
-	"fmt"
-	"net"
-	"os"
-	"strings"
-
-	"github.com/pkg/errors"
-	"github.com/rancher/kine/pkg/drivers/dqlite"
-	"github.com/rancher/kine/pkg/drivers/mysql"
-	"github.com/rancher/kine/pkg/drivers/pgsql"
-	"github.com/rancher/kine/pkg/drivers/sqlite"
-	"github.com/rancher/kine/pkg/server"
-	"github.com/rancher/kine/pkg/tls"
-	"github.com/sirupsen/logrus"
-	"google.golang.org/grpc"
-)
-
-const (
-	KineSocket      = "unix://kine.sock"
-	SQLiteBackend   = "sqlite"
-	DQLiteBackend   = "dqlite"
-	ETCDBackend     = "etcd3"
-	MySQLBackend    = "mysql"
-	PostgresBackend = "postgres"
-)
-
-type Config struct {
-	GRPCServer *grpc.Server
-	Listener   string
-	Endpoint   string
-
-	tls.Config
-}
-
-type ETCDConfig struct {
-	Endpoints   []string
-	TLSConfig   tls.Config
-	LeaderElect bool
-}
-
-func Listen(ctx context.Context, config Config) (ETCDConfig, error) {
-	driver, dsn := ParseStorageEndpoint(config.Endpoint)
-	if driver == ETCDBackend {
-		return ETCDConfig{
-			Endpoints:   strings.Split(config.Endpoint, ","),
-			TLSConfig:   config.Config,
-			LeaderElect: true,
-		}, nil
-	}
-
-	leaderelect, backend, err := getKineStorageBackend(ctx, driver, dsn, config)
-	if err != nil {
-		return ETCDConfig{}, errors.Wrap(err, "building kine")
-	}
-
-	if err := backend.Start(ctx); err != nil {
-		return ETCDConfig{}, errors.Wrap(err, "starting kine backend")
-	}
-
-	listen := config.Listener
-	if listen == "" {
-		listen = KineSocket
-	}
-
-	b := server.New(backend)
-	grpcServer := grpcServer(config)
-	b.Register(grpcServer)
-
-	listener, err := createListener(listen)
-	if err != nil {
-		return ETCDConfig{}, err
-	}
-
-	go func() {
-		if err := grpcServer.Serve(listener); err != nil {
-			logrus.Errorf("Kine server shutdown: %v", err)
-		}
-		<-ctx.Done()
-		grpcServer.Stop()
-		listener.Close()
-	}()
-
-	return ETCDConfig{
-		LeaderElect: leaderelect,
-		Endpoints:   []string{listen},
-		TLSConfig:   tls.Config{},
-	}, nil
-}
-
-func createListener(listen string) (ret net.Listener, rerr error) {
-	network, address := networkAndAddress(listen)
-
-	if network == "unix" {
-		if err := os.Remove(address); err != nil && !os.IsNotExist(err) {
-			logrus.Warnf("failed to remove socket %s: %v", address, err)
-		}
-		defer func() {
-			if err := os.Chmod(address, 0600); err != nil {
-				rerr = err
-			}
-		}()
-	}
-
-	logrus.Infof("Kine listening on %s://%s", network, address)
-	return net.Listen(network, address)
-}
-
-func grpcServer(config Config) *grpc.Server {
-	if config.GRPCServer != nil {
-		return config.GRPCServer
-	}
-	return grpc.NewServer()
-}
-
-func getKineStorageBackend(ctx context.Context, driver, dsn string, cfg Config) (bool, server.Backend, error) {
-	var (
-		backend     server.Backend
-		leaderElect = true
-		err         error
-	)
-	switch driver {
-	case SQLiteBackend:
-		leaderElect = false
-		backend, err = sqlite.New(ctx, dsn)
-	case DQLiteBackend:
-		backend, err = dqlite.New(ctx, dsn)
-	case PostgresBackend:
-		backend, err = pgsql.New(ctx, dsn, cfg.Config)
-	case MySQLBackend:
-		backend, err = mysql.New(ctx, dsn, cfg.Config)
-	default:
-		return false, nil, fmt.Errorf("storage backend is not defined")
-	}
-
-	return leaderElect, backend, err
-}
-
-func ParseStorageEndpoint(storageEndpoint string) (string, string) {
-	network, address := networkAndAddress(storageEndpoint)
-	switch network {
-	case "":
-		return SQLiteBackend, ""
-	case "http":
-		fallthrough
-	case "https":
-		return ETCDBackend, address
-	}
-	return network, address
-}
-
-func networkAndAddress(str string) (string, string) {
-	parts := strings.SplitN(str, "://", 2)
-	if len(parts) > 1 {
-		return parts[0], parts[1]
-	}
-	return "", parts[0]
-}
diff --git a/vendor/github.com/rancher/kine/pkg/logstructured/logstructured.go b/vendor/github.com/rancher/kine/pkg/logstructured/logstructured.go
deleted file mode 100644
index 9fa4db3783b..00000000000
--- a/vendor/github.com/rancher/kine/pkg/logstructured/logstructured.go
+++ /dev/null
@@ -1,362 +0,0 @@
-package logstructured
-
-import (
-	"context"
-	"sync"
-	"time"
-
-	"github.com/rancher/kine/pkg/server"
-	"github.com/sirupsen/logrus"
-)
-
-type Log interface {
-	Start(ctx context.Context) error
-	CurrentRevision(ctx context.Context) (int64, error)
-	List(ctx context.Context, prefix, startKey string, limit, revision int64, includeDeletes bool) (int64, []*server.Event, error)
-	After(ctx context.Context, prefix string, revision, limit int64) (int64, []*server.Event, error)
-	Watch(ctx context.Context, prefix string) <-chan []*server.Event
-	Count(ctx context.Context, prefix string) (int64, int64, error)
-	Append(ctx context.Context, event *server.Event) (int64, error)
-}
-
-type LogStructured struct {
-	log Log
-}
-
-func New(log Log) *LogStructured {
-	return &LogStructured{
-		log: log,
-	}
-}
-
-func (l *LogStructured) Start(ctx context.Context) error {
-	if err := l.log.Start(ctx); err != nil {
-		return err
-	}
-	l.Create(ctx, "/registry/health", []byte(`{"health":"true"}`), 0)
-	go l.ttl(ctx)
-	return nil
-}
-
-func (l *LogStructured) Get(ctx context.Context, key string, revision int64) (revRet int64, kvRet *server.KeyValue, errRet error) {
-	defer func() {
-		l.adjustRevision(ctx, &revRet)
-		logrus.Debugf("GET %s, rev=%d => rev=%d, kv=%v, err=%v", key, revision, revRet, kvRet != nil, errRet)
-	}()
-
-	rev, event, err := l.get(ctx, key, revision, false)
-	if event == nil {
-		return rev, nil, err
-	}
-	return rev, event.KV, err
-}
-
-func (l *LogStructured) get(ctx context.Context, key string, revision int64, includeDeletes bool) (int64, *server.Event, error) {
-	rev, events, err := l.log.List(ctx, key, "", 1, revision, includeDeletes)
-	if err == server.ErrCompacted {
-		// ignore compacted when getting by revision
-		err = nil
-	}
-	if err != nil {
-		return 0, nil, err
-	}
-	if revision != 0 {
-		rev = revision
-	}
-	if len(events) == 0 {
-		return rev, nil, nil
-	}
-	return rev, events[0], nil
-}
-
-func (l *LogStructured) adjustRevision(ctx context.Context, rev *int64) {
-	if *rev != 0 {
-		return
-	}
-
-	if newRev, err := l.log.CurrentRevision(ctx); err == nil {
-		*rev = newRev
-	}
-}
-
-func (l *LogStructured) Create(ctx context.Context, key string, value []byte, lease int64) (revRet int64, errRet error) {
-	defer func() {
-		l.adjustRevision(ctx, &revRet)
-		logrus.Debugf("CREATE %s, size=%d, lease=%d => rev=%d, err=%v", key, len(value), lease, revRet, errRet)
-	}()
-
-	rev, prevEvent, err := l.get(ctx, key, 0, true)
-	if err != nil {
-		return 0, err
-	}
-	createEvent := &server.Event{
-		Create: true,
-		KV: &server.KeyValue{
-			Key:   key,
-			Value: value,
-			Lease: lease,
-		},
-		PrevKV: &server.KeyValue{
-			ModRevision: rev,
-		},
-	}
-	if prevEvent != nil {
-		if !prevEvent.Delete {
-			return 0, server.ErrKeyExists
-		}
-		createEvent.PrevKV = prevEvent.KV
-	}
-
-	revRet, errRet = l.log.Append(ctx, createEvent)
-	return
-}
-
-func (l *LogStructured) Delete(ctx context.Context, key string, revision int64) (revRet int64, kvRet *server.KeyValue, deletedRet bool, errRet error) {
-	defer func() {
-		l.adjustRevision(ctx, &revRet)
-		logrus.Debugf("DELETE %s, rev=%d => rev=%d, kv=%v, deleted=%v, err=%v", key, revision, revRet, kvRet != nil, deletedRet, errRet)
-	}()
-
-	rev, event, err := l.get(ctx, key, 0, true)
-	if err != nil {
-		return 0, nil, false, err
-	}
-
-	if event == nil {
-		return rev, nil, true, nil
-	}
-
-	if event.Delete {
-		return rev, event.KV, true, nil
-	}
-
-	if revision != 0 && event.KV.ModRevision != revision {
-		return rev, event.KV, false, nil
-	}
-
-	deleteEvent := &server.Event{
-		Delete: true,
-		KV:     event.KV,
-		PrevKV: event.KV,
-	}
-
-	rev, err = l.log.Append(ctx, deleteEvent)
-	if err != nil {
-		// If error on Append we assume it's a UNIQUE constraint error, so we fetch the latest (if we can)
-		// and return that the delete failed
-		latestRev, latestEvent, latestErr := l.get(ctx, key, 0, true)
-		if latestErr != nil || latestEvent == nil {
-			return rev, event.KV, false, nil
-		}
-		return latestRev, latestEvent.KV, false, nil
-	}
-	return rev, event.KV, true, err
-}
-
-func (l *LogStructured) List(ctx context.Context, prefix, startKey string, limit, revision int64) (revRet int64, kvRet []*server.KeyValue, errRet error) {
-	defer func() {
-		logrus.Debugf("LIST %s, start=%s, limit=%d, rev=%d => rev=%d, kvs=%d, err=%v", prefix, startKey, limit, revision, revRet, len(kvRet), errRet)
-	}()
-
-	rev, events, err := l.log.List(ctx, prefix, startKey, limit, revision, false)
-	if err != nil {
-		return 0, nil, err
-	}
-	if revision == 0 && len(events) == 0 {
-		// if no revision is requested and no events are returned, then
-		// get the current revision and relist.  Relist is required because
-		// between now and getting the current revision something could have
-		// been created.
-		currentRev, err := l.log.CurrentRevision(ctx)
-		if err != nil {
-			return 0, nil, err
-		}
-		return l.List(ctx, prefix, startKey, limit, currentRev)
-	} else if revision != 0 {
-		rev = revision
-	}
-
-	kvs := make([]*server.KeyValue, 0, len(events))
-	for _, event := range events {
-		kvs = append(kvs, event.KV)
-	}
-	return rev, kvs, nil
-}
-
-func (l *LogStructured) Count(ctx context.Context, prefix string) (revRet int64, count int64, err error) {
-	defer func() {
-		logrus.Debugf("COUNT %s => rev=%d, count=%d, err=%v", prefix, revRet, count, err)
-	}()
-	rev, count, err := l.log.Count(ctx, prefix)
-	if err != nil {
-		return 0, 0, err
-	}
-
-	if count == 0 {
-		// if count is zero, then so is revision, so now get the current revision and re-count at that revision
-		currentRev, err := l.log.CurrentRevision(ctx)
-		if err != nil {
-			return 0, 0, err
-		}
-		rev, rows, err := l.List(ctx, prefix, prefix, 1000, currentRev)
-		return rev, int64(len(rows)), err
-	}
-	return rev, count, nil
-}
-
-func (l *LogStructured) Update(ctx context.Context, key string, value []byte, revision, lease int64) (revRet int64, kvRet *server.KeyValue, updateRet bool, errRet error) {
-	defer func() {
-		l.adjustRevision(ctx, &revRet)
-		kvRev := int64(0)
-		if kvRet != nil {
-			kvRev = kvRet.ModRevision
-		}
-		logrus.Debugf("UPDATE %s, value=%d, rev=%d, lease=%v => rev=%d, kvrev=%d, updated=%v, err=%v", key, len(value), revision, lease, revRet, kvRev, updateRet, errRet)
-	}()
-
-	rev, event, err := l.get(ctx, key, 0, false)
-	if err != nil {
-		return 0, nil, false, err
-	}
-
-	if event == nil {
-		return 0, nil, false, nil
-	}
-
-	if event.KV.ModRevision != revision {
-		return rev, event.KV, false, nil
-	}
-
-	updateEvent := &server.Event{
-		KV: &server.KeyValue{
-			Key:            key,
-			CreateRevision: event.KV.CreateRevision,
-			Value:          value,
-			Lease:          lease,
-		},
-		PrevKV: event.KV,
-	}
-
-	rev, err = l.log.Append(ctx, updateEvent)
-	if err != nil {
-		rev, event, err := l.get(ctx, key, 0, false)
-		if event == nil {
-			return rev, nil, false, err
-		}
-		return rev, event.KV, false, err
-	}
-
-	updateEvent.KV.ModRevision = rev
-	return rev, updateEvent.KV, true, err
-}
-
-func (l *LogStructured) ttlEvents(ctx context.Context) chan *server.Event {
-	result := make(chan *server.Event)
-	wg := sync.WaitGroup{}
-	wg.Add(2)
-
-	go func() {
-		wg.Wait()
-		close(result)
-	}()
-
-	go func() {
-		defer wg.Done()
-		rev, events, err := l.log.List(ctx, "/", "", 1000, 0, false)
-		for len(events) > 0 {
-			if err != nil {
-				logrus.Errorf("failed to read old events for ttl")
-				return
-			}
-
-			for _, event := range events {
-				if event.KV.Lease > 0 {
-					result <- event
-				}
-			}
-
-			_, events, err = l.log.List(ctx, "/", events[len(events)-1].KV.Key, 1000, rev, false)
-		}
-	}()
-
-	go func() {
-		defer wg.Done()
-		for events := range l.log.Watch(ctx, "/") {
-			for _, event := range events {
-				if event.KV.Lease > 0 {
-					result <- event
-				}
-			}
-		}
-	}()
-
-	return result
-}
-
-func (l *LogStructured) ttl(ctx context.Context) {
-	// vary naive TTL support
-	mutex := &sync.Mutex{}
-	for event := range l.ttlEvents(ctx) {
-		go func(event *server.Event) {
-			select {
-			case <-ctx.Done():
-				return
-			case <-time.After(time.Duration(event.KV.Lease) * time.Second):
-			}
-			mutex.Lock()
-			l.Delete(ctx, event.KV.Key, event.KV.ModRevision)
-			mutex.Unlock()
-		}(event)
-	}
-}
-
-func (l *LogStructured) Watch(ctx context.Context, prefix string, revision int64) <-chan []*server.Event {
-	logrus.Debugf("WATCH %s, revision=%d", prefix, revision)
-
-	// starting watching right away so we don't miss anything
-	ctx, cancel := context.WithCancel(ctx)
-	readChan := l.log.Watch(ctx, prefix)
-
-	// include the current revision in list
-	if revision > 0 {
-		revision -= 1
-	}
-
-	result := make(chan []*server.Event, 100)
-
-	rev, kvs, err := l.log.After(ctx, prefix, revision, 0)
-	if err != nil {
-		logrus.Errorf("failed to list %s for revision %d", prefix, revision)
-		cancel()
-	}
-
-	logrus.Debugf("WATCH LIST key=%s rev=%d => rev=%d kvs=%d", prefix, revision, rev, len(kvs))
-
-	go func() {
-		lastRevision := revision
-		if len(kvs) > 0 {
-			lastRevision = rev
-		}
-
-		if len(kvs) > 0 {
-			result <- kvs
-		}
-
-		// always ensure we fully read the channel
-		for i := range readChan {
-			result <- filter(i, lastRevision)
-		}
-		close(result)
-		cancel()
-	}()
-
-	return result
-}
-
-func filter(events []*server.Event, rev int64) []*server.Event {
-	for len(events) > 0 && events[0].KV.ModRevision <= rev {
-		events = events[1:]
-	}
-
-	return events
-}
diff --git a/vendor/github.com/rancher/kine/pkg/logstructured/sqllog/sql.go b/vendor/github.com/rancher/kine/pkg/logstructured/sqllog/sql.go
deleted file mode 100644
index 18235a75edb..00000000000
--- a/vendor/github.com/rancher/kine/pkg/logstructured/sqllog/sql.go
+++ /dev/null
@@ -1,519 +0,0 @@
-package sqllog
-
-import (
-	"context"
-	"database/sql"
-	"strings"
-	"time"
-
-	"github.com/rancher/kine/pkg/broadcaster"
-	"github.com/rancher/kine/pkg/server"
-	"github.com/sirupsen/logrus"
-)
-
-type SQLLog struct {
-	d           Dialect
-	broadcaster broadcaster.Broadcaster
-	ctx         context.Context
-	notify      chan int64
-}
-
-func New(d Dialect) *SQLLog {
-	l := &SQLLog{
-		d:      d,
-		notify: make(chan int64, 1024),
-	}
-	return l
-}
-
-type Dialect interface {
-	ListCurrent(ctx context.Context, prefix string, limit int64, includeDeleted bool) (*sql.Rows, error)
-	List(ctx context.Context, prefix, startKey string, limit, revision int64, includeDeleted bool) (*sql.Rows, error)
-	Count(ctx context.Context, prefix string) (int64, int64, error)
-	CurrentRevision(ctx context.Context) (int64, error)
-	After(ctx context.Context, prefix string, rev, limit int64) (*sql.Rows, error)
-	Insert(ctx context.Context, key string, create, delete bool, createRevision, previousRevision int64, ttl int64, value, prevValue []byte) (int64, error)
-	GetRevision(ctx context.Context, revision int64) (*sql.Rows, error)
-	DeleteRevision(ctx context.Context, revision int64) error
-	GetCompactRevision(ctx context.Context) (int64, error)
-	SetCompactRevision(ctx context.Context, revision int64) error
-	Fill(ctx context.Context, revision int64) error
-	IsFill(key string) bool
-}
-
-func (s *SQLLog) Start(ctx context.Context) (err error) {
-	s.ctx = ctx
-	return
-}
-
-func (s *SQLLog) compactStart(ctx context.Context) error {
-	rows, err := s.d.After(ctx, "compact_rev_key", 0, 0)
-	if err != nil {
-		return err
-	}
-
-	_, _, events, err := RowsToEvents(rows)
-	if err != nil {
-		return err
-	}
-
-	if len(events) == 0 {
-		_, err := s.Append(ctx, &server.Event{
-			Create: true,
-			KV: &server.KeyValue{
-				Key:   "compact_rev_key",
-				Value: []byte(""),
-			},
-		})
-		return err
-	} else if len(events) == 1 {
-		return nil
-	}
-
-	// this is to work around a bug in which we ended up with two compact_rev_key rows
-	maxRev := int64(0)
-	maxID := int64(0)
-	for _, event := range events {
-		if event.PrevKV != nil && event.PrevKV.ModRevision > maxRev {
-			maxRev = event.PrevKV.ModRevision
-			maxID = event.KV.ModRevision
-		}
-	}
-
-	for _, event := range events {
-		if event.KV.ModRevision == maxID {
-			continue
-		}
-		if err := s.d.DeleteRevision(ctx, event.KV.ModRevision); err != nil {
-			return err
-		}
-	}
-
-	return nil
-}
-
-func (s *SQLLog) compact() {
-	var (
-		nextEnd int64
-	)
-	t := time.NewTicker(5 * time.Minute)
-	nextEnd, _ = s.d.CurrentRevision(s.ctx)
-
-outer:
-	for {
-		select {
-		case <-s.ctx.Done():
-			return
-		case <-t.C:
-		}
-
-		currentRev, err := s.d.CurrentRevision(s.ctx)
-		if err != nil {
-			logrus.Errorf("failed to get current revision: %v", err)
-			continue
-		}
-
-		end := nextEnd
-		nextEnd = currentRev
-
-		cursor, err := s.d.GetCompactRevision(s.ctx)
-		if err != nil {
-			logrus.Errorf("failed to get compact revision: %v", err)
-			continue
-		}
-
-		// leave the last 1000
-		end = end - 1000
-
-		savedCursor := cursor
-		// Purposefully start at the current and redo the current as
-		// it could have failed before actually compacting
-		for ; cursor <= end; cursor++ {
-			rows, err := s.d.GetRevision(s.ctx, cursor)
-			if err != nil {
-				logrus.Errorf("failed to get revision %d: %v", cursor, err)
-				continue outer
-			}
-
-			_, _, events, err := RowsToEvents(rows)
-			if err != nil {
-				logrus.Errorf("failed to convert to events: %v", err)
-				continue outer
-			}
-
-			if len(events) == 0 {
-				continue
-			}
-
-			event := events[0]
-
-			if event.KV.Key == "compact_rev_key" {
-				// don't compact the compact key
-				continue
-			}
-
-			setRev := false
-			if event.PrevKV != nil && event.PrevKV.ModRevision != 0 {
-				if savedCursor != cursor {
-					if err := s.d.SetCompactRevision(s.ctx, cursor); err != nil {
-						logrus.Errorf("failed to record compact revision: %v", err)
-						continue outer
-					}
-					savedCursor = cursor
-					setRev = true
-				}
-
-				if err := s.d.DeleteRevision(s.ctx, event.PrevKV.ModRevision); err != nil {
-					logrus.Errorf("failed to delete revision %d: %v", event.PrevKV.ModRevision, err)
-					continue outer
-				}
-			}
-
-			if event.Delete {
-				if !setRev && savedCursor != cursor {
-					if err := s.d.SetCompactRevision(s.ctx, cursor); err != nil {
-						logrus.Errorf("failed to record compact revision: %v", err)
-						continue outer
-					}
-					savedCursor = cursor
-				}
-
-				if err := s.d.DeleteRevision(s.ctx, cursor); err != nil {
-					logrus.Errorf("failed to delete current revision %d: %v", cursor, err)
-					continue outer
-				}
-			}
-		}
-
-		if savedCursor != cursor {
-			if err := s.d.SetCompactRevision(s.ctx, cursor); err != nil {
-				logrus.Errorf("failed to record compact revision: %v", err)
-				continue outer
-			}
-		}
-	}
-}
-
-func (s *SQLLog) CurrentRevision(ctx context.Context) (int64, error) {
-	return s.d.CurrentRevision(ctx)
-}
-
-func (s *SQLLog) After(ctx context.Context, prefix string, revision, limit int64) (int64, []*server.Event, error) {
-	if strings.HasSuffix(prefix, "/") {
-		prefix += "%"
-	}
-
-	rows, err := s.d.After(ctx, prefix, revision, limit)
-	if err != nil {
-		return 0, nil, err
-	}
-
-	rev, compact, result, err := RowsToEvents(rows)
-	if revision > 0 && revision < compact {
-		return rev, result, server.ErrCompacted
-	}
-
-	return rev, result, err
-}
-
-func (s *SQLLog) List(ctx context.Context, prefix, startKey string, limit, revision int64, includeDeleted bool) (int64, []*server.Event, error) {
-	var (
-		rows *sql.Rows
-		err  error
-	)
-
-	// It's assumed that when there is a start key that that key exists.
-	if strings.HasSuffix(prefix, "/") {
-		// In the situation of a list start the startKey will not exist so set to ""
-		if prefix == startKey {
-			startKey = ""
-		}
-		prefix += "%"
-	} else {
-		// Also if this isn't a list there is no reason to pass startKey
-		startKey = ""
-	}
-
-	if revision == 0 {
-		rows, err = s.d.ListCurrent(ctx, prefix, limit, includeDeleted)
-	} else {
-		rows, err = s.d.List(ctx, prefix, startKey, limit, revision, includeDeleted)
-	}
-	if err != nil {
-		return 0, nil, err
-	}
-
-	rev, compact, result, err := RowsToEvents(rows)
-	if err != nil {
-		return 0, nil, err
-	}
-
-	if revision > 0 && len(result) == 0 {
-		// a zero length result won't have the compact revision so get it manually
-		compact, err = s.d.GetCompactRevision(ctx)
-		if err != nil {
-			return 0, nil, err
-		}
-	}
-
-	if revision > 0 && revision < compact {
-		return rev, result, server.ErrCompacted
-	}
-
-	select {
-	case s.notify <- rev:
-	default:
-	}
-
-	return rev, result, err
-}
-
-func RowsToEvents(rows *sql.Rows) (int64, int64, []*server.Event, error) {
-	var (
-		result  []*server.Event
-		rev     int64
-		compact int64
-	)
-	defer rows.Close()
-
-	for rows.Next() {
-		event := &server.Event{}
-		if err := scan(rows, &rev, &compact, event); err != nil {
-			return 0, 0, nil, err
-		}
-		result = append(result, event)
-	}
-
-	return rev, compact, result, nil
-}
-
-func (s *SQLLog) Watch(ctx context.Context, prefix string) <-chan []*server.Event {
-	res := make(chan []*server.Event, 100)
-	values, err := s.broadcaster.Subscribe(ctx, s.startWatch)
-	if err != nil {
-		return nil
-	}
-
-	checkPrefix := strings.HasSuffix(prefix, "/")
-
-	go func() {
-		defer close(res)
-		for i := range values {
-			events, ok := filter(i, checkPrefix, prefix)
-			if ok {
-				res <- events
-			}
-		}
-	}()
-
-	return res
-}
-
-func filter(events interface{}, checkPrefix bool, prefix string) ([]*server.Event, bool) {
-	eventList := events.([]*server.Event)
-	filteredEventList := make([]*server.Event, 0, len(eventList))
-
-	for _, event := range eventList {
-		if (checkPrefix && strings.HasPrefix(event.KV.Key, prefix)) || event.KV.Key == prefix {
-			filteredEventList = append(filteredEventList, event)
-		}
-	}
-
-	return filteredEventList, len(filteredEventList) > 0
-}
-
-func (s *SQLLog) startWatch() (chan interface{}, error) {
-	if err := s.compactStart(s.ctx); err != nil {
-		return nil, err
-	}
-
-	pollStart, err := s.d.GetCompactRevision(s.ctx)
-	if err != nil {
-		return nil, err
-	}
-
-	c := make(chan interface{})
-	// start compaction and polling at the same time to watch starts
-	// at the oldest revision, but compaction doesn't create gaps
-	go s.compact()
-	go s.poll(c, pollStart)
-	return c, nil
-}
-
-func (s *SQLLog) poll(result chan interface{}, pollStart int64) {
-	var (
-		last        = pollStart
-		skip        int64
-		skipTime    time.Time
-		waitForMore = true
-	)
-
-	wait := time.NewTicker(time.Second)
-	defer wait.Stop()
-	defer close(result)
-
-	for {
-		if waitForMore {
-			select {
-			case <-s.ctx.Done():
-				return
-			case check := <-s.notify:
-				if check <= last {
-					continue
-				}
-			case <-wait.C:
-			}
-		}
-		waitForMore = true
-
-		rows, err := s.d.After(s.ctx, "%", last, 500)
-		if err != nil {
-			logrus.Errorf("fail to list latest changes: %v", err)
-			continue
-		}
-
-		_, _, events, err := RowsToEvents(rows)
-		if err != nil {
-			logrus.Errorf("fail to convert rows changes: %v", err)
-			continue
-		}
-
-		if len(events) == 0 {
-			continue
-		}
-
-		waitForMore = len(events) < 100
-
-		rev := last
-		var (
-			sequential []*server.Event
-			saveLast   bool
-		)
-
-		for _, event := range events {
-			next := rev + 1
-			// Ensure that we are notifying events in a sequential fashion. For example if we find row 4 before 3
-			// we don't want to notify row 4 because 3 is essentially dropped forever.
-			if event.KV.ModRevision != next {
-				if canSkipRevision(next, skip, skipTime) {
-					// This situation should never happen, but we have it here as a fallback just for unknown reasons
-					// we don't want to pause all watches forever
-					logrus.Errorf("GAP %s, revision=%d, delete=%v, next=%d", event.KV.Key, event.KV.ModRevision, event.Delete, next)
-				} else if skip != next {
-					// This is the first time we have encountered this missing revision, so record time start
-					// and trigger a quick retry for simple out of order events
-					skip = next
-					skipTime = time.Now()
-					select {
-					case s.notify <- next:
-					default:
-					}
-					break
-				} else {
-					if err := s.d.Fill(s.ctx, next); err == nil {
-						logrus.Debugf("FILL, revision=%d, err=%v", next, err)
-						select {
-						case s.notify <- next:
-						default:
-						}
-					} else {
-						logrus.Debugf("FILL FAILED, revision=%d, err=%v", next, err)
-					}
-					break
-				}
-			}
-
-			// we have done something now that we should save the last revision.  We don't save here now because
-			// the next loop could fail leading to saving the reported revision without reporting it.  In practice this
-			// loop right now has no error exit so the next loop shouldn't fail, but if we for some reason add a method
-			// that returns error, that would be a tricky bug to find.  So instead we only save the last revision at
-			// the same time we write to the channel.
-			saveLast = true
-			rev = event.KV.ModRevision
-			if s.d.IsFill(event.KV.Key) {
-				logrus.Debugf("NOT TRIGGER FILL %s, revision=%d, delete=%v", event.KV.Key, event.KV.ModRevision, event.Delete)
-			} else {
-				sequential = append(sequential, event)
-				logrus.Debugf("TRIGGERED %s, revision=%d, delete=%v", event.KV.Key, event.KV.ModRevision, event.Delete)
-			}
-		}
-
-		if saveLast {
-			last = rev
-			if len(sequential) > 0 {
-				result <- sequential
-			}
-		}
-	}
-}
-
-func canSkipRevision(rev, skip int64, skipTime time.Time) bool {
-	return rev == skip && time.Now().Sub(skipTime) > time.Second
-}
-
-func (s *SQLLog) Count(ctx context.Context, prefix string) (int64, int64, error) {
-	if strings.HasSuffix(prefix, "/") {
-		prefix += "%"
-	}
-	return s.d.Count(ctx, prefix)
-}
-
-func (s *SQLLog) Append(ctx context.Context, event *server.Event) (int64, error) {
-	e := *event
-	if e.KV == nil {
-		e.KV = &server.KeyValue{}
-	}
-	if e.PrevKV == nil {
-		e.PrevKV = &server.KeyValue{}
-	}
-
-	rev, err := s.d.Insert(ctx, e.KV.Key,
-		e.Create,
-		e.Delete,
-		e.KV.CreateRevision,
-		e.PrevKV.ModRevision,
-		e.KV.Lease,
-		e.KV.Value,
-		e.PrevKV.Value,
-	)
-	if err != nil {
-		return 0, err
-	}
-	select {
-	case s.notify <- rev:
-	default:
-	}
-	return rev, nil
-}
-
-func scan(rows *sql.Rows, rev *int64, compact *int64, event *server.Event) error {
-	event.KV = &server.KeyValue{}
-	event.PrevKV = &server.KeyValue{}
-
-	c := &sql.NullInt64{}
-
-	err := rows.Scan(
-		rev,
-		c,
-		&event.KV.ModRevision,
-		&event.KV.Key,
-		&event.Create,
-		&event.Delete,
-		&event.KV.CreateRevision,
-		&event.PrevKV.ModRevision,
-		&event.KV.Lease,
-		&event.KV.Value,
-		&event.PrevKV.Value,
-	)
-	if err != nil {
-		return err
-	}
-
-	if event.Create {
-		event.KV.CreateRevision = event.KV.ModRevision
-		event.PrevKV = nil
-	}
-
-	*compact = c.Int64
-	return nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/compact.go b/vendor/github.com/rancher/kine/pkg/server/compact.go
deleted file mode 100644
index ba7f63d400c..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/compact.go
+++ /dev/null
@@ -1,34 +0,0 @@
-package server
-
-import (
-	"context"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func isCompact(txn *etcdserverpb.TxnRequest) bool {
-	return len(txn.Compare) == 1 &&
-		txn.Compare[0].Target == etcdserverpb.Compare_VERSION &&
-		txn.Compare[0].Result == etcdserverpb.Compare_EQUAL &&
-		len(txn.Success) == 1 &&
-		txn.Success[0].GetRequestPut() != nil &&
-		len(txn.Failure) == 1 &&
-		txn.Failure[0].GetRequestRange() != nil &&
-		string(txn.Compare[0].Key) == "compact_rev_key"
-}
-
-func (l *LimitedServer) compact(ctx context.Context) (*etcdserverpb.TxnResponse, error) {
-	return &etcdserverpb.TxnResponse{
-		Header:    &etcdserverpb.ResponseHeader{},
-		Succeeded: true,
-		Responses: []*etcdserverpb.ResponseOp{
-			{
-				Response: &etcdserverpb.ResponseOp_ResponsePut{
-					ResponsePut: &etcdserverpb.PutResponse{
-						Header: &etcdserverpb.ResponseHeader{},
-					},
-				},
-			},
-		},
-	}, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/create.go b/vendor/github.com/rancher/kine/pkg/server/create.go
deleted file mode 100644
index d1cc9ae0320..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/create.go
+++ /dev/null
@@ -1,54 +0,0 @@
-package server
-
-import (
-	"context"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func isCreate(txn *etcdserverpb.TxnRequest) *etcdserverpb.PutRequest {
-	if len(txn.Compare) == 1 &&
-		txn.Compare[0].Target == etcdserverpb.Compare_MOD &&
-		txn.Compare[0].Result == etcdserverpb.Compare_EQUAL &&
-		txn.Compare[0].GetModRevision() == 0 &&
-		len(txn.Failure) == 0 &&
-		len(txn.Success) == 1 &&
-		txn.Success[0].GetRequestPut() != nil {
-		return txn.Success[0].GetRequestPut()
-	}
-	return nil
-}
-
-func (l *LimitedServer) create(ctx context.Context, put *etcdserverpb.PutRequest, txn *etcdserverpb.TxnRequest) (*etcdserverpb.TxnResponse, error) {
-	if put.IgnoreLease {
-		return nil, unsupported("ignoreLease")
-	} else if put.IgnoreValue {
-		return nil, unsupported("ignoreValue")
-	} else if put.PrevKv {
-		return nil, unsupported("prevKv")
-	}
-
-	rev, err := l.backend.Create(ctx, string(put.Key), put.Value, put.Lease)
-	if err == ErrKeyExists {
-		return &etcdserverpb.TxnResponse{
-			Header:    txnHeader(rev),
-			Succeeded: false,
-		}, nil
-	} else if err != nil {
-		return nil, err
-	}
-
-	return &etcdserverpb.TxnResponse{
-		Header: txnHeader(rev),
-		Responses: []*etcdserverpb.ResponseOp{
-			{
-				Response: &etcdserverpb.ResponseOp_ResponsePut{
-					ResponsePut: &etcdserverpb.PutResponse{
-						Header: txnHeader(rev),
-					},
-				},
-			},
-		},
-		Succeeded: true,
-	}, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/delete.go b/vendor/github.com/rancher/kine/pkg/server/delete.go
deleted file mode 100644
index e950dd16515..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/delete.go
+++ /dev/null
@@ -1,50 +0,0 @@
-package server
-
-import (
-	"context"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func isDelete(txn *etcdserverpb.TxnRequest) (int64, string, bool) {
-	if len(txn.Compare) == 0 &&
-		len(txn.Failure) == 0 &&
-		len(txn.Success) == 2 &&
-		txn.Success[0].GetRequestRange() != nil &&
-		txn.Success[1].GetRequestDeleteRange() != nil {
-		rng := txn.Success[1].GetRequestDeleteRange()
-		return 0, string(rng.Key), true
-	}
-	if len(txn.Compare) == 1 &&
-		txn.Compare[0].Target == etcdserverpb.Compare_MOD &&
-		txn.Compare[0].Result == etcdserverpb.Compare_EQUAL &&
-		len(txn.Failure) == 1 &&
-		txn.Failure[0].GetRequestRange() != nil &&
-		len(txn.Success) == 1 &&
-		txn.Success[0].GetRequestDeleteRange() != nil {
-		return txn.Compare[0].GetModRevision(), string(txn.Success[0].GetRequestDeleteRange().Key), true
-	}
-	return 0, "", false
-}
-
-func (l *LimitedServer) delete(ctx context.Context, key string, revision int64) (*etcdserverpb.TxnResponse, error) {
-	rev, kv, ok, err := l.backend.Delete(ctx, key, revision)
-	if err != nil {
-		return nil, err
-	}
-
-	return &etcdserverpb.TxnResponse{
-		Header: txnHeader(rev),
-		Responses: []*etcdserverpb.ResponseOp{
-			{
-				Response: &etcdserverpb.ResponseOp_ResponseRange{
-					ResponseRange: &etcdserverpb.RangeResponse{
-						Header: txnHeader(rev),
-						Kvs:    toKVs(kv),
-					},
-				},
-			},
-		},
-		Succeeded: ok,
-	}, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/get.go b/vendor/github.com/rancher/kine/pkg/server/get.go
deleted file mode 100644
index 7ad94a13ddd..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/get.go
+++ /dev/null
@@ -1,27 +0,0 @@
-package server
-
-import (
-	"context"
-	"fmt"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func (l *LimitedServer) get(ctx context.Context, r *etcdserverpb.RangeRequest) (*RangeResponse, error) {
-	if r.Limit != 0 {
-		return nil, fmt.Errorf("invalid combination of rangeEnd and limit, limit should be 0 got %d", r.Limit)
-	}
-
-	rev, kv, err := l.backend.Get(ctx, string(r.Key), r.Revision)
-	if err != nil {
-		return nil, err
-	}
-
-	resp := &RangeResponse{
-		Header: txnHeader(rev),
-	}
-	if kv != nil {
-		resp.Kvs = []*KeyValue{kv}
-	}
-	return resp, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/lease.go b/vendor/github.com/rancher/kine/pkg/server/lease.go
deleted file mode 100644
index 13a0e1aa1f6..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/lease.go
+++ /dev/null
@@ -1,32 +0,0 @@
-package server
-
-import (
-	"context"
-	"fmt"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func (s *KVServerBridge) LeaseGrant(ctx context.Context, req *etcdserverpb.LeaseGrantRequest) (*etcdserverpb.LeaseGrantResponse, error) {
-	return &etcdserverpb.LeaseGrantResponse{
-		Header: &etcdserverpb.ResponseHeader{},
-		ID:     req.TTL,
-		TTL:    req.TTL,
-	}, nil
-}
-
-func (s *KVServerBridge) LeaseRevoke(context.Context, *etcdserverpb.LeaseRevokeRequest) (*etcdserverpb.LeaseRevokeResponse, error) {
-	return nil, fmt.Errorf("lease revoke is not supported")
-}
-
-func (s *KVServerBridge) LeaseKeepAlive(etcdserverpb.Lease_LeaseKeepAliveServer) error {
-	return fmt.Errorf("lease keep alive is not supported")
-}
-
-func (s *KVServerBridge) LeaseTimeToLive(context.Context, *etcdserverpb.LeaseTimeToLiveRequest) (*etcdserverpb.LeaseTimeToLiveResponse, error) {
-	return nil, fmt.Errorf("lease time to live is not supported")
-}
-
-func (s *KVServerBridge) LeaseLeases(context.Context, *etcdserverpb.LeaseLeasesRequest) (*etcdserverpb.LeaseLeasesResponse, error) {
-	return nil, fmt.Errorf("lease leases is not supported")
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/limited.go b/vendor/github.com/rancher/kine/pkg/server/limited.go
deleted file mode 100644
index 7c2b0abdfef..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/limited.go
+++ /dev/null
@@ -1,52 +0,0 @@
-package server
-
-import (
-	"context"
-	"fmt"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-type LimitedServer struct {
-	backend Backend
-}
-
-func (l *LimitedServer) Range(ctx context.Context, r *etcdserverpb.RangeRequest) (*RangeResponse, error) {
-	if len(r.RangeEnd) == 0 {
-		return l.get(ctx, r)
-	}
-	return l.list(ctx, r)
-}
-
-func txnHeader(rev int64) *etcdserverpb.ResponseHeader {
-	return &etcdserverpb.ResponseHeader{
-		Revision: rev,
-	}
-}
-
-func (l *LimitedServer) Txn(ctx context.Context, txn *etcdserverpb.TxnRequest) (*etcdserverpb.TxnResponse, error) {
-	if put := isCreate(txn); put != nil {
-		return l.create(ctx, put, txn)
-	}
-	if rev, key, ok := isDelete(txn); ok {
-		return l.delete(ctx, key, rev)
-	}
-	if rev, key, value, lease, ok := isUpdate(txn); ok {
-		return l.update(ctx, rev, key, value, lease)
-	}
-	if isCompact(txn) {
-		return l.compact(ctx)
-	}
-	return nil, fmt.Errorf("unsupported transaction: %v", txn)
-}
-
-type ResponseHeader struct {
-	Revision int64
-}
-
-type RangeResponse struct {
-	Header *etcdserverpb.ResponseHeader
-	Kvs    []*KeyValue
-	More   bool
-	Count  int64
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/list.go b/vendor/github.com/rancher/kine/pkg/server/list.go
deleted file mode 100644
index a0a323f5d10..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/list.go
+++ /dev/null
@@ -1,56 +0,0 @@
-package server
-
-import (
-	"bytes"
-	"context"
-	"fmt"
-	"strings"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func (l *LimitedServer) list(ctx context.Context, r *etcdserverpb.RangeRequest) (*RangeResponse, error) {
-	if len(r.RangeEnd) == 0 {
-		return nil, fmt.Errorf("invalid range end length of 0")
-	}
-
-	prefix := string(append(r.RangeEnd[:len(r.RangeEnd)-1], r.RangeEnd[len(r.RangeEnd)-1]-1))
-	if !strings.HasSuffix(prefix, "/") {
-		prefix = prefix + "/"
-	}
-	start := string(bytes.TrimRight(r.Key, "\x00"))
-
-	if r.CountOnly {
-		rev, count, err := l.backend.Count(ctx, prefix)
-		if err != nil {
-			return nil, err
-		}
-		return &RangeResponse{
-			Header: txnHeader(rev),
-			Count:  count,
-		}, nil
-	}
-
-	limit := r.Limit
-	if limit > 0 {
-		limit++
-	}
-
-	rev, kvs, err := l.backend.List(ctx, prefix, start, limit, r.Revision)
-	if err != nil {
-		return nil, err
-	}
-
-	resp := &RangeResponse{
-		Header: txnHeader(rev),
-		Count:  int64(len(kvs)),
-		Kvs:    kvs,
-	}
-
-	if limit > 0 && resp.Count > r.Limit {
-		resp.More = true
-		resp.Kvs = kvs[0 : limit-1]
-	}
-
-	return resp, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/server.go b/vendor/github.com/rancher/kine/pkg/server/server.go
deleted file mode 100644
index 2d5389ba1a7..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/server.go
+++ /dev/null
@@ -1,153 +0,0 @@
-package server
-
-import (
-	"context"
-	"fmt"
-
-	"github.com/sirupsen/logrus"
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-	"go.etcd.io/etcd/mvcc/mvccpb"
-	"google.golang.org/grpc"
-	"google.golang.org/grpc/health"
-	healthpb "google.golang.org/grpc/health/grpc_health_v1"
-)
-
-var (
-	_ etcdserverpb.KVServer    = (*KVServerBridge)(nil)
-	_ etcdserverpb.WatchServer = (*KVServerBridge)(nil)
-)
-
-type KVServerBridge struct {
-	limited *LimitedServer
-}
-
-func New(backend Backend) *KVServerBridge {
-	return &KVServerBridge{
-		limited: &LimitedServer{
-			backend: backend,
-		},
-	}
-}
-
-func (k *KVServerBridge) Register(server *grpc.Server) {
-	etcdserverpb.RegisterLeaseServer(server, k)
-	etcdserverpb.RegisterWatchServer(server, k)
-	etcdserverpb.RegisterKVServer(server, k)
-
-	hsrv := health.NewServer()
-	hsrv.SetServingStatus("", healthpb.HealthCheckResponse_SERVING)
-	healthpb.RegisterHealthServer(server, hsrv)
-}
-
-func (k *KVServerBridge) Range(ctx context.Context, r *etcdserverpb.RangeRequest) (*etcdserverpb.RangeResponse, error) {
-	if r.KeysOnly {
-		return nil, unsupported("keysOnly")
-	}
-
-	if r.MaxCreateRevision != 0 {
-		return nil, unsupported("maxCreateRevision")
-	}
-
-	if r.SortOrder != 0 {
-		return nil, unsupported("sortOrder")
-	}
-
-	if r.SortTarget != 0 {
-		return nil, unsupported("sortTarget")
-	}
-
-	if r.Serializable {
-		return nil, unsupported("serializable")
-	}
-
-	if r.KeysOnly {
-		return nil, unsupported("keysOnly")
-	}
-
-	if r.MinModRevision != 0 {
-		return nil, unsupported("minModRevision")
-	}
-
-	if r.MinCreateRevision != 0 {
-		return nil, unsupported("minCreateRevision")
-	}
-
-	if r.MaxCreateRevision != 0 {
-		return nil, unsupported("maxCreateRevision")
-	}
-
-	if r.MaxModRevision != 0 {
-		return nil, unsupported("maxModRevision")
-	}
-
-	resp, err := k.limited.Range(ctx, r)
-	if err != nil {
-		logrus.Errorf("error while range on %s %s: %v", r.Key, r.RangeEnd, err)
-		return nil, err
-	}
-
-	rangeResponse := &etcdserverpb.RangeResponse{
-		More:   resp.More,
-		Count:  resp.Count,
-		Header: resp.Header,
-		Kvs:    toKVs(resp.Kvs...),
-	}
-
-	return rangeResponse, nil
-}
-
-func toKVs(kvs ...*KeyValue) []*mvccpb.KeyValue {
-	if len(kvs) == 0 || kvs[0] == nil {
-		return nil
-	}
-
-	ret := make([]*mvccpb.KeyValue, 0, len(kvs))
-	for _, kv := range kvs {
-		newKV := toKV(kv)
-		if newKV != nil {
-			ret = append(ret, newKV)
-		}
-	}
-	return ret
-}
-
-func toKV(kv *KeyValue) *mvccpb.KeyValue {
-	if kv == nil {
-		return nil
-	}
-	return &mvccpb.KeyValue{
-		Key:            []byte(kv.Key),
-		Value:          kv.Value,
-		Lease:          kv.Lease,
-		CreateRevision: kv.CreateRevision,
-		ModRevision:    kv.ModRevision,
-	}
-}
-
-func (k *KVServerBridge) Put(ctx context.Context, r *etcdserverpb.PutRequest) (*etcdserverpb.PutResponse, error) {
-	return nil, fmt.Errorf("put is not supported")
-}
-
-func (k *KVServerBridge) DeleteRange(ctx context.Context, r *etcdserverpb.DeleteRangeRequest) (*etcdserverpb.DeleteRangeResponse, error) {
-	return nil, fmt.Errorf("delete is not supported")
-}
-
-func (k *KVServerBridge) Txn(ctx context.Context, r *etcdserverpb.TxnRequest) (*etcdserverpb.TxnResponse, error) {
-	res, err := k.limited.Txn(ctx, r)
-	if err != nil {
-		logrus.Errorf("error in txn: %v", err)
-	}
-	return res, err
-}
-
-func (k *KVServerBridge) Compact(ctx context.Context, r *etcdserverpb.CompactionRequest) (*etcdserverpb.CompactionResponse, error) {
-	return &etcdserverpb.CompactionResponse{
-		Header: &etcdserverpb.ResponseHeader{
-			Revision: r.Revision,
-		},
-	}, nil
-}
-
-func unsupported(field string) error {
-	return fmt.Errorf("%s is unsupported", field)
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/types.go b/vendor/github.com/rancher/kine/pkg/server/types.go
deleted file mode 100644
index 0cd0c134152..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/types.go
+++ /dev/null
@@ -1,38 +0,0 @@
-package server
-
-import (
-	"context"
-
-	"go.etcd.io/etcd/etcdserver/api/v3rpc/rpctypes"
-)
-
-var (
-	ErrKeyExists = rpctypes.ErrGRPCDuplicateKey
-	ErrCompacted = rpctypes.ErrGRPCCompacted
-)
-
-type Backend interface {
-	Start(ctx context.Context) error
-	Get(ctx context.Context, key string, revision int64) (int64, *KeyValue, error)
-	Create(ctx context.Context, key string, value []byte, lease int64) (int64, error)
-	Delete(ctx context.Context, key string, revision int64) (int64, *KeyValue, bool, error)
-	List(ctx context.Context, prefix, startKey string, limit, revision int64) (int64, []*KeyValue, error)
-	Count(ctx context.Context, prefix string) (int64, int64, error)
-	Update(ctx context.Context, key string, value []byte, revision, lease int64) (int64, *KeyValue, bool, error)
-	Watch(ctx context.Context, key string, revision int64) <-chan []*Event
-}
-
-type KeyValue struct {
-	Key            string
-	CreateRevision int64
-	ModRevision    int64
-	Value          []byte
-	Lease          int64
-}
-
-type Event struct {
-	Delete bool
-	Create bool
-	KV     *KeyValue
-	PrevKV *KeyValue
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/update.go b/vendor/github.com/rancher/kine/pkg/server/update.go
deleted file mode 100644
index f8eded948c6..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/update.go
+++ /dev/null
@@ -1,72 +0,0 @@
-package server
-
-import (
-	"context"
-
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-)
-
-func isUpdate(txn *etcdserverpb.TxnRequest) (int64, string, []byte, int64, bool) {
-	if len(txn.Compare) == 1 &&
-		txn.Compare[0].Target == etcdserverpb.Compare_MOD &&
-		txn.Compare[0].Result == etcdserverpb.Compare_EQUAL &&
-		len(txn.Success) == 1 &&
-		txn.Success[0].GetRequestPut() != nil &&
-		len(txn.Failure) == 1 &&
-		txn.Failure[0].GetRequestRange() != nil {
-		return txn.Compare[0].GetModRevision(),
-			string(txn.Compare[0].Key),
-			txn.Success[0].GetRequestPut().Value,
-			txn.Success[0].GetRequestPut().Lease,
-			true
-	}
-	return 0, "", nil, 0, false
-}
-
-func (l *LimitedServer) update(ctx context.Context, rev int64, key string, value []byte, lease int64) (*etcdserverpb.TxnResponse, error) {
-	var (
-		kv  *KeyValue
-		ok  bool
-		err error
-	)
-
-	if rev == 0 {
-		rev, err = l.backend.Create(ctx, key, value, lease)
-		ok = true
-	} else {
-		rev, kv, ok, err = l.backend.Update(ctx, key, value, rev, lease)
-	}
-	if err != nil {
-		return nil, err
-	}
-
-	resp := &etcdserverpb.TxnResponse{
-		Header:    txnHeader(rev),
-		Succeeded: ok,
-	}
-
-	if ok {
-		resp.Responses = []*etcdserverpb.ResponseOp{
-			{
-				Response: &etcdserverpb.ResponseOp_ResponsePut{
-					ResponsePut: &etcdserverpb.PutResponse{
-						Header: txnHeader(rev),
-					},
-				},
-			},
-		}
-	} else {
-		resp.Responses = []*etcdserverpb.ResponseOp{
-			{
-				Response: &etcdserverpb.ResponseOp_ResponseRange{
-					ResponseRange: &etcdserverpb.RangeResponse{
-						Header: txnHeader(rev),
-						Kvs:    toKVs(kv),
-					},
-				},
-			},
-		}
-	}
-
-	return resp, nil
-}
diff --git a/vendor/github.com/rancher/kine/pkg/server/watch.go b/vendor/github.com/rancher/kine/pkg/server/watch.go
deleted file mode 100644
index b8b70de9d96..00000000000
--- a/vendor/github.com/rancher/kine/pkg/server/watch.go
+++ /dev/null
@@ -1,152 +0,0 @@
-package server
-
-import (
-	"context"
-	"sync"
-	"sync/atomic"
-
-	"github.com/sirupsen/logrus"
-	"go.etcd.io/etcd/etcdserver/etcdserverpb"
-	"go.etcd.io/etcd/mvcc/mvccpb"
-)
-
-var (
-	watchID int64
-)
-
-func (s *KVServerBridge) Watch(ws etcdserverpb.Watch_WatchServer) error {
-	w := watcher{
-		server:  ws,
-		backend: s.limited.backend,
-		watches: map[int64]func(){},
-	}
-	defer w.Close()
-
-	for {
-		msg, err := ws.Recv()
-		if err != nil {
-			return err
-		}
-
-		if msg.GetCreateRequest() != nil {
-			w.Start(ws.Context(), msg.GetCreateRequest())
-		} else if msg.GetCancelRequest() != nil {
-			logrus.Debugf("WATCH CANCEL REQ id=%d", msg.GetCancelRequest().GetWatchId())
-			w.Cancel(msg.GetCancelRequest().WatchId, nil)
-		}
-	}
-}
-
-type watcher struct {
-	sync.Mutex
-
-	wg      sync.WaitGroup
-	backend Backend
-	server  etcdserverpb.Watch_WatchServer
-	watches map[int64]func()
-}
-
-func (w *watcher) Start(ctx context.Context, r *etcdserverpb.WatchCreateRequest) {
-	w.Lock()
-	defer w.Unlock()
-
-	ctx, cancel := context.WithCancel(ctx)
-
-	id := atomic.AddInt64(&watchID, 1)
-	w.watches[id] = cancel
-	w.wg.Add(1)
-
-	key := string(r.Key)
-
-	logrus.Debugf("WATCH START id=%d, count=%d, key=%s, revision=%d", id, len(w.watches), key, r.StartRevision)
-
-	go func() {
-		defer w.wg.Done()
-		if err := w.server.Send(&etcdserverpb.WatchResponse{
-			Header:  &etcdserverpb.ResponseHeader{},
-			Created: true,
-			WatchId: id,
-		}); err != nil {
-			w.Cancel(id, err)
-			return
-		}
-
-		for events := range w.backend.Watch(ctx, key, r.StartRevision) {
-			if len(events) == 0 {
-				continue
-			}
-
-			if logrus.IsLevelEnabled(logrus.DebugLevel) {
-				for _, event := range events {
-					logrus.Debugf("WATCH READ id=%d, key=%s, revision=%d", id, event.KV.Key, event.KV.ModRevision)
-				}
-			}
-
-			if err := w.server.Send(&etcdserverpb.WatchResponse{
-				Header:  txnHeader(events[len(events)-1].KV.ModRevision),
-				WatchId: id,
-				Events:  toEvents(events...),
-			}); err != nil {
-				w.Cancel(id, err)
-				continue
-			}
-		}
-		w.Cancel(id, nil)
-		logrus.Debugf("WATCH CLOSE id=%d, key=%s", id, key)
-	}()
-}
-
-func toEvents(events ...*Event) []*mvccpb.Event {
-	ret := make([]*mvccpb.Event, 0, len(events))
-	for _, e := range events {
-		ret = append(ret, toEvent(e))
-	}
-	return ret
-}
-
-func toEvent(event *Event) *mvccpb.Event {
-	e := &mvccpb.Event{
-		Kv:     toKV(event.KV),
-		PrevKv: toKV(event.PrevKV),
-	}
-	if event.Delete {
-		e.Type = mvccpb.DELETE
-	} else {
-		e.Type = mvccpb.PUT
-	}
-
-	return e
-}
-
-func (w *watcher) Cancel(watchID int64, err error) {
-	w.Lock()
-	if cancel, ok := w.watches[watchID]; ok {
-		cancel()
-		delete(w.watches, watchID)
-	}
-	w.Unlock()
-
-	reason := ""
-	if err != nil {
-		reason = err.Error()
-	}
-	logrus.Debugf("WATCH CANCEL id=%d reason=%s", watchID, reason)
-	serr := w.server.Send(&etcdserverpb.WatchResponse{
-		Header:       &etcdserverpb.ResponseHeader{},
-		Canceled:     true,
-		CancelReason: "watch closed",
-		WatchId:      watchID,
-	})
-	if serr != nil && err != nil {
-		logrus.Errorf("WATCH Failed to send cancel response for watchID %d: %v", watchID, serr)
-	}
-}
-
-func (w *watcher) Close() {
-	w.Lock()
-	for _, v := range w.watches {
-		v()
-	}
-	w.Unlock()
-	w.wg.Wait()
-}
diff --git a/vendor/github.com/rancher/kine/pkg/tls/config.go b/vendor/github.com/rancher/kine/pkg/tls/config.go
deleted file mode 100644
index 083dbcdaa66..00000000000
--- a/vendor/github.com/rancher/kine/pkg/tls/config.go
+++ /dev/null
@@ -1,31 +0,0 @@
-package tls
-
-import (
-	"crypto/tls"
-
-	"go.etcd.io/etcd/pkg/transport"
-)
-
-type Config struct {
-	CAFile   string
-	CertFile string
-	KeyFile  string
-}
-
-func (c Config) ClientConfig() (*tls.Config, error) {
-	if c.CertFile == "" && c.KeyFile == "" && c.CAFile == "" {
-		return nil, nil
-	}
-
-	info := &transport.TLSInfo{
-		CertFile:      c.CertFile,
-		KeyFile:       c.KeyFile,
-		TrustedCAFile: c.CAFile,
-	}
-	tlsConfig, err := info.ClientConfig()
-	if err != nil {
-		return nil, err
-	}
-
-	return tlsConfig, nil
-}
-- 
2.25.1

